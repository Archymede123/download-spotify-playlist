{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nexport function fetchData(accessToken) {\n  var _this = this;\n\n  fetch('https://api.spotify.com/v1/me', {\n    headers: {\n      'Authorization': 'Bearer ' + accessToken\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    _this.setState({\n      user: {\n        name: data.display_name\n      }\n    });\n  });\n  fetch(\"https://api.spotify.com/v1/me/playlists?limit=49\", {\n    headers: {\n      'Authorization': 'Bearer ' + accessToken\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (playlistData) {\n    var playlists = playlistData.items;\n    var trackDataPromises = playlists.map(function (playlist) {\n      var responsePromise = [];\n      [0, 1, 2].forEach(function (page) {\n        var responsePromiseDetails = fetch(\"\".concat(playlist.tracks.href, \"?offset=\").concat(page, \"00\"), {\n          headers: {\n            'Authorization': 'Bearer ' + accessToken\n          }\n        }).then(function (response) {\n          return response.json();\n        });\n        responsePromise.push(responsePromiseDetails);\n      });\n      var trackDataPromise = Promise.all(responsePromise);\n      return trackDataPromise;\n    });\n    var allTracksDataPromises = Promise.all(trackDataPromises);\n    var playlistsPromise = allTracksDataPromises.then(function (trackDatasArrays) {\n      trackDatasArrays.map(function (trackDatas, index) {\n        var trackDatasPushed = [];\n        trackDatas.map(function (track) {\n          return trackDatasPushed.push(track.items);\n        });\n\n        var flatten = function flatten(array) {\n          var _ref;\n\n          return Array.isArray(array) ? (_ref = []).concat.apply(_ref, _toConsumableArray(array.map(flatten))) : array;\n        };\n\n        var trackDatasFlatten = flatten(trackDatasPushed);\n        var playlistTrackData = [];\n        trackDatasFlatten.forEach(function (trackData, i) {\n          var playlistSong = {\n            name: trackData.track.name,\n            duration: trackData.track.duration_ms / 1000\n          };\n          playlistTrackData.push(playlistSong);\n        });\n        return playlists[index].trackDatas = playlistTrackData;\n      });\n      return playlists;\n    });\n    return playlistsPromise;\n  }).then(function (playlists) {\n    _this.setState({\n      playlists: playlists.map(function (item, index) {\n        return {\n          name: item.name,\n          songs: item.trackDatas,\n          imageUrl: item.images[0].url,\n          rating: 0,\n          index: index\n        };\n      })\n    });\n  });\n}","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/api/fetchData.js"],"names":["fetchData","accessToken","fetch","headers","then","response","json","data","setState","user","name","display_name","playlistData","playlists","items","trackDataPromises","map","playlist","responsePromise","forEach","page","responsePromiseDetails","tracks","href","push","trackDataPromise","Promise","all","allTracksDataPromises","playlistsPromise","trackDatasArrays","trackDatas","index","trackDatasPushed","track","flatten","array","Array","isArray","concat","trackDatasFlatten","playlistTrackData","trackData","i","playlistSong","duration","duration_ms","item","songs","imageUrl","images","url","rating"],"mappings":"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","sourcesContent":["export function fetchData(accessToken) {\n    fetch('https://api.spotify.com/v1/me', {\n        headers: { 'Authorization': 'Bearer ' + accessToken }\n    })\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                user: {\n                    name: data.display_name\n                }\n            })\n        })\n\n    fetch(`https://api.spotify.com/v1/me/playlists?limit=49`, {\n        headers: { 'Authorization': 'Bearer ' + accessToken }\n    }).then(response => response.json())\n        .then(playlistData => {\n            let playlists = playlistData.items\n            let trackDataPromises = playlists.map(playlist => {\n                let responsePromise = [];\n                [0, 1, 2].forEach(page => {\n                    let responsePromiseDetails = fetch(`${playlist.tracks.href}?offset=${page}00`, {\n                        headers: { 'Authorization': 'Bearer ' + accessToken }\n                    }).then(response => response.json())\n                    responsePromise.push(responsePromiseDetails)\n                })\n                let trackDataPromise = Promise.all(responsePromise)\n                return trackDataPromise\n            })\n            let allTracksDataPromises =\n                Promise.all(trackDataPromises)\n            let playlistsPromise = allTracksDataPromises.then(trackDatasArrays => {\n                trackDatasArrays.map((trackDatas, index) => {\n                    let trackDatasPushed = [];\n                    trackDatas.map(track => {\n                        return trackDatasPushed.push(track.items)\n                    })\n                    let flatten = array => Array.isArray(array)\n                        ? [].concat(...array.map(flatten))\n                        : array\n                    let trackDatasFlatten = flatten(trackDatasPushed)\n                    let playlistTrackData = []\n                    trackDatasFlatten.forEach((trackData, i) => {\n                        let playlistSong = {\n                            name: trackData.track.name,\n                            duration: trackData.track.duration_ms / 1000\n                        }\n                        playlistTrackData.push(playlistSong)\n                    })\n                    return playlists[index].trackDatas = playlistTrackData\n                })\n                return playlists\n            })\n            return playlistsPromise\n        })\n        .then(playlists => {\n            this.setState({\n                playlists: playlists.map((item, index) => {\n                    return {\n                        name: item.name,\n                        songs: item.trackDatas,\n                        imageUrl: item.images[0].url,\n                        rating: 0,\n                        index: index\n                    }\n                }\n                )\n            })\n        })\n}"]},"metadata":{},"sourceType":"module"}