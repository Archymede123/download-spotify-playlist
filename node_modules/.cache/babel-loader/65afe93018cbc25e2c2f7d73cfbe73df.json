{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/FindArtist.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown';\nvar spotifyApi = new SpotifyWebApi();\n\nvar FindArtist =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FindArtist, _Component);\n\n  function FindArtist(props) {\n    var _this;\n\n    _classCallCheck(this, FindArtist);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindArtist).call(this, props));\n    _this._isMounted = true;\n\n    _this.getCurrentPlayedSong = function () {\n      if (_this._isMounted) {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          _this.setState({\n            currentSong: response.item.name,\n            currentArtist: {\n              name: response.item.artists[0].name,\n              id: response.item.artists[0].id\n            }\n          });\n        });\n      }\n    };\n\n    _this.playBlindtest = function (event) {\n      if (_this._isMounted) {\n        _this.setState({\n          blindtestGuess: event.currentTarget.value\n        });\n\n        _this.getCurrentPlayedSong();\n      }\n    };\n\n    var timeToGuess = _this.props.timeToGuess / 1000;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false,\n      timeToGuess: timeToGuess,\n      toggleSong: true\n    };\n    return _this;\n  }\n\n  _createClass(FindArtist, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n      this.getCurrentPlayedSong();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this._isMounted) {\n        if (prevState.toggleSong !== this.state.toggleSong) {\n          this.getCurrentPlayedSong();\n        }\n\n        if (this.state.currentArtist && prevState.currentArtist !== this.state.currentArtist) {\n          spotifyApi.getArtistRelatedArtists(this.state.currentArtist.id).then(function (response) {\n            console.log(response);\n          });\n        }\n\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n          if (this._isMounted) {\n            this.props.updateScore();\n            this.setState({\n              answerIsCorrect: true\n            });\n            this.setState({\n              blindtestGuess: \"\"\n            });\n          }\n        }\n\n        if (prevProps.currentSong !== this.props.currentSong) {\n          this.setState({\n            toggleSong: !this.state.toggleSong,\n            answerIsCorrect: false\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      console.log(\"blindtest unmounted\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Try to guess the song now playing\"), React.createElement(Countdown, {\n        timeToGuess: this.state.timeToGuess,\n        key: this.state.toggleSong,\n        answerIsCorrect: this.state.answerIsCorrect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"answer-input\",\n        type: \"text\",\n        onChange: this.playBlindtest,\n        value: this.state.blindtestGuess,\n        disabled: this.state.answerIsCorrect ? \"disabled\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FindArtist;\n}(Component);\n\nexport default FindArtist;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/FindArtist.js"],"names":["React","Component","SpotifyWebApi","Countdown","spotifyApi","FindArtist","props","_isMounted","getCurrentPlayedSong","getMyCurrentPlaybackState","then","response","setState","currentSong","item","name","currentArtist","artists","id","playBlindtest","event","blindtestGuess","currentTarget","value","timeToGuess","state","answerIsCorrect","toggleSong","setAccessToken","access_token","prevProps","prevState","getArtistRelatedArtists","console","log","toLowerCase","updateScore"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown'\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass FindArtist extends Component {\n    constructor(props) {\n        super(props);\n        let timeToGuess = this.props.timeToGuess / 1000\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false,\n            timeToGuess,\n            toggleSong: true\n        }\n    }\n\n    _isMounted = true\n\n    getCurrentPlayedSong = () => {\n        if (this._isMounted) {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    this.setState({\n                        currentSong: response.item.name,\n                        currentArtist: {\n                            name: response.item.artists[0].name,\n                            id: response.item.artists[0].id\n                        }\n                    })\n                })\n        }\n    }\n\n    playBlindtest = (event) => {\n        if (this._isMounted) {\n            this.setState({ blindtestGuess: event.currentTarget.value })\n            this.getCurrentPlayedSong()\n        }\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        this.getCurrentPlayedSong()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this._isMounted) {\n            if (prevState.toggleSong !== this.state.toggleSong) {\n                this.getCurrentPlayedSong()\n            }\n\n            if (this.state.currentArtist && prevState.currentArtist !== this.state.currentArtist) {\n                spotifyApi.getArtistRelatedArtists(this.state.currentArtist.id)\n                    .then(response => {\n                        console.log(response)\n                    })\n            }\n\n\n            if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n                if (this._isMounted) {\n                    this.props.updateScore()\n                    this.setState({ answerIsCorrect: true })\n                    this.setState({ blindtestGuess: \"\" })\n                }\n            }\n\n            if (prevProps.currentSong !== this.props.currentSong) {\n                this.setState({\n                    toggleSong: !this.state.toggleSong,\n                    answerIsCorrect: false\n                })\n            }\n        }\n\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        console.log(\"blindtest unmounted\")\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Try to guess the song now playing</p>\n                <Countdown\n                    timeToGuess={this.state.timeToGuess}\n                    key={this.state.toggleSong}\n                    answerIsCorrect={this.state.answerIsCorrect}\n                />\n                <input\n                    className=\"answer-input\"\n                    type=\"text\"\n                    onChange={this.playBlindtest}\n                    value={this.state.blindtestGuess}\n                    disabled={this.state.answerIsCorrect ? \"disabled\" : \"\"}\n                />\n            </div>\n        )\n    }\n}\n\nexport default FindArtist;"]},"metadata":{},"sourceType":"module"}