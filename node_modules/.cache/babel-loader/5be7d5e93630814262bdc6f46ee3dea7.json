{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/LoginPage.js\";\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport Button from './UI-components/Button';\nimport BoxBorder from './UI-components/BoxBorder';\nimport SpotifyWebApi from 'spotify-web-api-js'; //css \n\nimport '../css/App.css';\nimport '../css/login.css'; //js \n\nimport { fetchPlaylistInfos, fetchPlaylistData } from '../api/fetchData';\nvar spotifyApi = new SpotifyWebApi();\n\nvar LoginPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginPage, _Component);\n\n  function LoginPage() {\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginPage).call(this));\n    _this._isMounted = true;\n\n    _this.goToPlaylists = function (event) {\n      event.preventDefault();\n      window.location = window.location.href.includes('localhost') ? 'http://localhost:8888/login' : 'https://better-playlists-backend.herokuapp.com/login';\n    };\n\n    var access_token = _this.getHashParams();\n\n    if (access_token) {\n      spotifyApi.setAccessToken(access_token);\n    }\n\n    _this.state = {\n      user: {},\n      playlists: {},\n      access_token: access_token,\n      loggedIn: access_token ? true : false\n    };\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"getHashParams\",\n    value: function getHashParams() {\n      var parsed = queryString.parse(window.location.search);\n      return parsed.access_token;\n    }\n  }, {\n    key: \"getUserInfo\",\n    value: function getUserInfo() {\n      spotifyApi.getUserPlaylists().then(function (response) {\n        console.log(response);\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var accessToken = this.state.access_token;\n      if (!accessToken) return;\n\n      if (this._isMounted) {\n        fetchPlaylistInfos(accessToken).then(function (data) {\n          _this2.setState({\n            user: [data.display_name, data.followers.total, data.images[0].url]\n          });\n        });\n        fetchPlaylistData(accessToken).then(function (playlists) {\n          _this2.setState({\n            playlists: playlists.map(function (item, index) {\n              return {\n                name: item.name,\n                songs: item.trackDatas,\n                imageUrl: item.images[0].url,\n                rating: 0,\n                index: index,\n                uri: item.uri\n              };\n            })\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var statePlaylist = this.state.playlists;\n\n      if (Object.keys(statePlaylist).length !== 0) {\n        this.props.loadSpotifyData(this.state);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var buttonWidth = {\n        width: '90%'\n      };\n      return React.createElement(BoxBorder, {\n        className: 'loginpage',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require(\"../images/logo.png\"),\n        alt: \"logo\",\n        className: \"logo\",\n        sizes: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"baseline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Connecte toi \\xE0 Spotify, tu verras \\xE7a va \\xEAtre super\"), React.createElement(Button, {\n        content: \"Se connecter\",\n        onClick: this.goToPlaylists,\n        style: buttonWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LoginPage;\n}(Component);\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/LoginPage.js"],"names":["React","Component","queryString","Button","BoxBorder","SpotifyWebApi","fetchPlaylistInfos","fetchPlaylistData","spotifyApi","LoginPage","_isMounted","goToPlaylists","event","preventDefault","window","location","href","includes","access_token","getHashParams","setAccessToken","state","user","playlists","loggedIn","parsed","parse","search","getUserPlaylists","then","response","console","log","accessToken","data","setState","display_name","followers","total","images","url","map","item","index","name","songs","trackDatas","imageUrl","rating","uri","statePlaylist","Object","keys","length","props","loadSpotifyData","buttonWidth","width","require"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,aAAP,MAA0B,oBAA1B,C,CAEA;;AACA,OAAO,gBAAP;AACA,OAAO,kBAAP,C,CAEA;;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,kBAAtD;AAEA,IAAMC,UAAU,GAAG,IAAIH,aAAJ,EAAnB;;IAEMI,S;;;;;AACF,uBAAc;AAAA;;AAAA;;AACV;AADU,UAedC,UAfc,GAeD,IAfC;;AAAA,UA+BdC,aA/Bc,GA+BE,UAACC,KAAD,EAAW;AACvBA,MAAAA,KAAK,CAACC,cAAN;AACAC,MAAAA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8B,WAA9B,IACZ,6BADY,GAEZ,sDAFN;AAGH,KApCa;;AAGV,QAAMC,YAAY,GAAG,MAAKC,aAAL,EAArB;;AACA,QAAID,YAAJ,EAAkB;AACdV,MAAAA,UAAU,CAACY,cAAX,CAA0BF,YAA1B;AACH;;AACD,UAAKG,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,SAAS,EAAE,EAFF;AAGTL,MAAAA,YAAY,EAAEA,YAHL;AAITM,MAAAA,QAAQ,EAAEN,YAAY,GAAG,IAAH,GAAU;AAJvB,KAAb;AAPU;AAab;;;;oCAIe;AAEZ,UAAIO,MAAM,GAAGvB,WAAW,CAACwB,KAAZ,CAAkBZ,MAAM,CAACC,QAAP,CAAgBY,MAAlC,CAAb;AACA,aAAOF,MAAM,CAACP,YAAd;AACH;;;kCAEa;AACVV,MAAAA,UAAU,CAACoB,gBAAX,GACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,OAHL;AAIH;;;wCAWmB;AAAA;;AAChB,UAAIG,WAAW,GAAG,KAAKZ,KAAL,CAAWH,YAA7B;AACA,UAAI,CAACe,WAAL,EAAkB;;AAClB,UAAI,KAAKvB,UAAT,EAAqB;AACjBJ,QAAAA,kBAAkB,CAAC2B,WAAD,CAAlB,CAAgCJ,IAAhC,CAAqC,UAAAK,IAAI,EAAI;AACzC,UAAA,MAAI,CAACC,QAAL,CAAc;AACVb,YAAAA,IAAI,EAAE,CAACY,IAAI,CAACE,YAAN,EAAoBF,IAAI,CAACG,SAAL,CAAeC,KAAnC,EAA0CJ,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeC,GAAzD;AADI,WAAd;AAGH,SAJD;AAKAjC,QAAAA,iBAAiB,CAAC0B,WAAD,CAAjB,CAA+BJ,IAA/B,CAAoC,UAAAN,SAAS,EAAI;AAC7C,UAAA,MAAI,CAACY,QAAL,CAAc;AACVZ,YAAAA,SAAS,EAAEA,SAAS,CAACkB,GAAV,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACtC,qBAAO;AACHC,gBAAAA,IAAI,EAAEF,IAAI,CAACE,IADR;AAEHC,gBAAAA,KAAK,EAAEH,IAAI,CAACI,UAFT;AAGHC,gBAAAA,QAAQ,EAAEL,IAAI,CAACH,MAAL,CAAY,CAAZ,EAAeC,GAHtB;AAIHQ,gBAAAA,MAAM,EAAE,CAJL;AAKHL,gBAAAA,KAAK,EAAEA,KALJ;AAMHM,gBAAAA,GAAG,EAAEP,IAAI,CAACO;AANP,eAAP;AAQH,aATU;AADD,WAAd;AAaH,SAdD;AAeH;AACJ;;;yCAEoB;AACjB,UAAIC,aAAa,GAAG,KAAK7B,KAAL,CAAWE,SAA/B;;AACA,UAAI4B,MAAM,CAACC,IAAP,CAAYF,aAAZ,EAA2BG,MAA3B,KAAsC,CAA1C,EAA6C;AACzC,aAAKC,KAAL,CAAWC,eAAX,CAA2B,KAAKlC,KAAhC;AACH;AACJ;;;2CAEsB;AACnB,WAAKX,UAAL,GAAkB,KAAlB;AACH;;;6BAEQ;AACL,UAAM8C,WAAW,GAAG;AAChBC,QAAAA,KAAK,EAAE;AADS,OAApB;AAGA,aACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,GAAG,EAAEC,OAAO,CAAC,oBAAD,CADhB;AAEI,QAAA,GAAG,EAAC,MAFR;AAGI,QAAA,SAAS,EAAC,MAHd;AAII,QAAA,KAAK,EAAC,EAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAMI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEANJ,EAQI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,cAAhB;AAA+B,QAAA,OAAO,EAAE,KAAK/C,aAA7C;AAA4D,QAAA,KAAK,EAAE6C,WAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CADJ;AAaH;;;;EA/FmBvD,S;;AAkGxB,eAAeQ,SAAf","sourcesContent":["import React, { Component } from 'react'\nimport queryString from 'query-string'\n\nimport Button from './UI-components/Button'\nimport BoxBorder from './UI-components/BoxBorder'\nimport SpotifyWebApi from 'spotify-web-api-js'\n\n//css \nimport '../css/App.css'\nimport '../css/login.css'\n\n//js \nimport { fetchPlaylistInfos, fetchPlaylistData } from '../api/fetchData'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass LoginPage extends Component {\n    constructor() {\n        super();\n\n        const access_token = this.getHashParams();\n        if (access_token) {\n            spotifyApi.setAccessToken(access_token)\n        }\n        this.state = {\n            user: {},\n            playlists: {},\n            access_token: access_token,\n            loggedIn: access_token ? true : false,\n        }\n    }\n\n    _isMounted = true;\n\n    getHashParams() {\n\n        let parsed = queryString.parse(window.location.search)\n        return parsed.access_token;\n    }\n\n    getUserInfo() {\n        spotifyApi.getUserPlaylists()\n            .then(response => {\n                console.log(response)\n            })\n    }\n\n\n    goToPlaylists = (event) => {\n        event.preventDefault()\n        window.location = window.location.href.includes('localhost')\n            ? 'http://localhost:8888/login'\n            : 'https://better-playlists-backend.herokuapp.com/login'\n    }\n\n\n    componentDidMount() {\n        let accessToken = this.state.access_token\n        if (!accessToken) return;\n        if (this._isMounted) {\n            fetchPlaylistInfos(accessToken).then(data => {\n                this.setState({\n                    user: [data.display_name, data.followers.total, data.images[0].url]\n                })\n            })\n            fetchPlaylistData(accessToken).then(playlists => {\n                this.setState({\n                    playlists: playlists.map((item, index) => {\n                        return {\n                            name: item.name,\n                            songs: item.trackDatas,\n                            imageUrl: item.images[0].url,\n                            rating: 0,\n                            index: index,\n                            uri: item.uri\n                        }\n                    }\n                    )\n                })\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        let statePlaylist = this.state.playlists\n        if (Object.keys(statePlaylist).length !== 0) {\n            this.props.loadSpotifyData(this.state)\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n\n    render() {\n        const buttonWidth = {\n            width: '90%',\n        }\n        return (\n            <BoxBorder className={'loginpage'}>\n                <img\n                    src={require(\"../images/logo.png\")}\n                    alt=\"logo\"\n                    className='logo'\n                    sizes='' />\n                <p className=\"baseline\">Connecte toi à Spotify, tu verras ça va être super\n                </p>\n                <Button content=\"Se connecter\" onClick={this.goToPlaylists} style={buttonWidth} />\n\n            </BoxBorder>\n        );\n    }\n}\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}