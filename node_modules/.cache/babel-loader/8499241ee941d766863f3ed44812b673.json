{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/PlaylistPicker.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components \n// import PlaylistCard from '../PlaylistCard';\n\nimport PlaylistCardTop from '../PlaylistCardTop'; // content\n\nimport spotifyPlaylists from './SpotifyPlaylists';\nvar spotifyApi = new SpotifyWebApi();\n\nvar PlaylistPicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlaylistPicker, _Component);\n\n  function PlaylistPicker(props) {\n    var _this;\n\n    _classCallCheck(this, PlaylistPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlaylistPicker).call(this, props));\n\n    _this.handleChange = function (event) {\n      var selectedOption = event.target;\n      var name = selectedOption.options[selectedOption.selectedIndex].getAttribute('name');\n      var uri = selectedOption.value;\n      var id = uri.match(/[^:]*$/);\n      var selectedPlaylist = {\n        name: name,\n        uri: uri,\n        id: id\n      };\n\n      _this.setState({\n        selectedPlaylist: selectedPlaylist\n      });\n\n      _this.props.selectPlaylist(selectedPlaylist);\n\n      _this.fetchPlaylist(selectedPlaylist.id);\n    };\n\n    _this.selectPlaylist = function (event) {\n      console.log(event);\n\n      _this.setState({\n        selectedPlaylist: true\n      });\n    };\n\n    _this.fetchPlaylist = function (playlistId) {\n      spotifyApi.getPlaylist(playlistId).then(function (response) {\n        var playlistLength = response.tracks.items.length;\n\n        _this.setState({\n          playlistLength: playlistLength\n        });\n      });\n    };\n\n    _this.state = {\n      spotifyPlaylists: spotifyPlaylists,\n      playlistsToRender: []\n    };\n    return _this;\n  }\n\n  _createClass(PlaylistPicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      spotifyApi.setAccessToken(this.props.access_token);\n      spotifyPlaylists.map(function (playlist) {\n        var id = playlist.uri.match(/[^:]*$/);\n        return spotifyApi.getPlaylist(id).then(function (response) {\n          var tracks = response.tracks.items.map(function (track) {\n            var trackData = {\n              name: track.track.name\n            };\n            return trackData;\n          });\n          var playlist = {\n            imageUrl: response.images[0].url,\n            name: response.name,\n            songs: tracks,\n            uri: response.uri\n          };\n\n          var playlistsToRender = _toConsumableArray(_this2.state.playlistsToRender).concat([playlist]);\n\n          _this2.setState({\n            playlistsToRender: playlistsToRender\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Select a playlist from the list\"), React.createElement(\"select\", {\n        name: \"playlistList\",\n        id: \"playlistList\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"placeholder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" -- select an option -- \"), this.state.spotifyPlaylists.map(function (playlist, key) {\n        return React.createElement(\"option\", {\n          key: key,\n          name: playlist.name,\n          value: playlist.uri,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, playlist.name);\n      })), this.state.playlistLength && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"There are \", this.state.playlistLength, \" tracks in this playlist\"), React.createElement(\"div\", {\n        className: \"playlistGrid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.state.playlistsToRender.map(function (playlist, key) {\n        return React.createElement(PlaylistCardTop, {\n          playlist: playlist,\n          key: key,\n          index: key,\n          history: _this3.props.history // className={this.state.selectedPlaylist && \"selected\"}\n          // onClick={this.selectPlaylist}\n          // addPlaylistRating={this.props.addPlaylistRating}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return PlaylistPicker;\n}(Component);\n\nexport default PlaylistPicker;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/PlaylistPicker.js"],"names":["React","Component","SpotifyWebApi","PlaylistCardTop","spotifyPlaylists","spotifyApi","PlaylistPicker","props","handleChange","event","selectedOption","target","name","options","selectedIndex","getAttribute","uri","value","id","match","selectedPlaylist","setState","selectPlaylist","fetchPlaylist","console","log","playlistId","getPlaylist","then","response","playlistLength","tracks","items","length","state","playlistsToRender","setAccessToken","access_token","map","playlist","track","trackData","imageUrl","images","url","songs","key","history"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n\n// my components \n// import PlaylistCard from '../PlaylistCard';\nimport PlaylistCardTop from '../PlaylistCardTop'\n\n// content\nimport spotifyPlaylists from './SpotifyPlaylists'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass PlaylistPicker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spotifyPlaylists,\n            playlistsToRender: []\n        }\n    }\n\n    handleChange = (event) => {\n        let selectedOption = event.target\n        let name = selectedOption.options[selectedOption.selectedIndex].getAttribute('name')\n        let uri = selectedOption.value\n        let id = uri.match(/[^:]*$/)\n        let selectedPlaylist = {\n            name,\n            uri,\n            id\n        }\n        this.setState({ selectedPlaylist })\n        this.props.selectPlaylist(selectedPlaylist)\n        this.fetchPlaylist(selectedPlaylist.id)\n    }\n\n    selectPlaylist = (event) => {\n        console.log(event)\n        this.setState({ selectedPlaylist: true })\n    }\n\n    fetchPlaylist = (playlistId) => {\n        spotifyApi.getPlaylist(playlistId).then(response => {\n            let playlistLength = response.tracks.items.length\n            this.setState({ playlistLength })\n        })\n    }\n\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        spotifyPlaylists.map(playlist => {\n            let id = playlist.uri.match(/[^:]*$/)\n            return spotifyApi.getPlaylist(id)\n                .then(response => {\n                    let tracks = response.tracks.items.map(track => {\n                        let trackData = { name: track.track.name }\n                        return trackData\n                    })\n\n                    let playlist = {\n                        imageUrl: response.images[0].url,\n                        name: response.name,\n                        songs: tracks,\n                        uri: response.uri\n                    }\n                    let playlistsToRender = [...this.state.playlistsToRender, playlist]\n                    this.setState({ playlistsToRender })\n                })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Select a playlist from the list</p>\n                <select name=\"playlistList\" id=\"playlistList\" onChange={this.handleChange}>\n                    <option value=\"placeholder\"> -- select an option -- </option>\n                    {this.state.spotifyPlaylists.map((playlist, key) =>\n                        <option key={key} name={playlist.name} value={playlist.uri}>{playlist.name}</option>\n                    )}\n                </select>\n                {this.state.playlistLength &&\n                    <p>There are {this.state.playlistLength} tracks in this playlist</p>\n                }\n                <div className=\"playlistGrid\">\n                    {this.state.playlistsToRender.map((playlist, key) =>\n                        <PlaylistCardTop\n                            playlist={playlist}\n                            key={key}\n                            index={key}\n                            history={this.props.history}\n                        // className={this.state.selectedPlaylist && \"selected\"}\n                        // onClick={this.selectPlaylist}\n                        // addPlaylistRating={this.props.addPlaylistRating}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PlaylistPicker;"]},"metadata":{},"sourceType":"module"}