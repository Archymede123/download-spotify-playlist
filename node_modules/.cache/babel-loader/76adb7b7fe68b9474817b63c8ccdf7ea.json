{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/LoginPage.js\";\nimport React, { Component } from 'react';\nimport Button from './UI-components/Button'; //css import\n\nimport '../css/App.css'; // js \n\nimport { fetchPlaylistInfos, fetchPlaylistData } from '../api/fetchData';\n\nvar LoginPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginPage, _Component);\n\n  function LoginPage() {\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginPage).call(this));\n    _this._isMounted = true;\n\n    _this.goToPlaylists = function (event) {\n      event.preventDefault();\n      window.location = 'http://localhost:8888/login';\n    };\n\n    var params = _this.getHashParams();\n\n    var access_token = params.access_token;\n    _this.state = {\n      user: {},\n      playlists: {},\n      access_token: access_token\n    };\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"getHashParams\",\n    value: function getHashParams() {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n      e = r.exec(q);\n\n      while (e) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n        e = r.exec(q);\n      }\n\n      return hashParams;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var accessToken = this.state.access_token; // console.log(accessToken)\n      // this.setState({ access_token: accessToken })\n\n      if (!accessToken) return;\n\n      if (this._isMounted) {\n        fetchPlaylistInfos(accessToken).then(function (data) {\n          _this2.setState({\n            user: [data.display_name, data.followers.total, data.images[0].url]\n          });\n        });\n        fetchPlaylistData(accessToken).then(function (playlists) {\n          _this2.setState({\n            playlists: playlists.map(function (item, index) {\n              return {\n                name: item.name,\n                songs: item.trackDatas,\n                imageUrl: item.images[0].url,\n                rating: 0,\n                index: index\n              };\n            })\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var statePlaylist = this.state.playlists;\n\n      if (Object.keys(statePlaylist).length !== 0) {\n        this.props.loadSpotifyData(this.state);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"You currently have no playlist loaded. Click the button below to login to your spotify account\"), React.createElement(Button, {\n        content: \"Sign In with Spotify\",\n        onClick: this.goToPlaylists,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LoginPage;\n}(Component);\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/LoginPage.js"],"names":["React","Component","Button","fetchPlaylistInfos","fetchPlaylistData","LoginPage","_isMounted","goToPlaylists","event","preventDefault","window","location","params","getHashParams","access_token","state","user","playlists","hashParams","e","r","q","hash","substring","exec","decodeURIComponent","accessToken","then","data","setState","display_name","followers","total","images","url","map","item","index","name","songs","trackDatas","imageUrl","rating","statePlaylist","Object","keys","length","props","loadSpotifyData","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from './UI-components/Button';\n\n//css import\nimport '../css/App.css';\n// js \nimport { fetchPlaylistInfos, fetchPlaylistData } from '../api/fetchData'\n\nclass LoginPage extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        const access_token = params.access_token;\n        this.state = {\n            user: {},\n            playlists: {},\n            access_token: access_token\n        }\n    }\n\n    _isMounted = true;\n\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        e = r.exec(q)\n        while (e) {\n            hashParams[e[1]] = decodeURIComponent(e[2]);\n            e = r.exec(q);\n        }\n        return hashParams;\n    }\n\n    goToPlaylists = (event) => {\n        event.preventDefault()\n        window.location = 'http://localhost:8888/login'\n    }\n\n    componentDidMount() {\n        let accessToken = this.state.access_token\n        // console.log(accessToken)\n        // this.setState({ access_token: accessToken })\n        if (!accessToken) return;\n\n        if (this._isMounted) {\n            fetchPlaylistInfos(accessToken).then(data => {\n                this.setState({\n                    user: [data.display_name, data.followers.total, data.images[0].url]\n                })\n            })\n\n            fetchPlaylistData(accessToken).then(playlists => {\n                this.setState({\n                    playlists: playlists.map((item, index) => {\n                        return {\n                            name: item.name,\n                            songs: item.trackDatas,\n                            imageUrl: item.images[0].url,\n                            rating: 0,\n                            index: index\n                        }\n                    }\n                    )\n                })\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        let statePlaylist = this.state.playlists\n        if (Object.keys(statePlaylist).length !== 0) {\n            this.props.loadSpotifyData(this.state)\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n\n    render() {\n        return (\n            <div>\n                <p style={{ margin: 0 }}>You currently have no playlist loaded. Click the button\n                    below to login to your spotify account\n                </p>\n                <Button content=\"Sign In with Spotify\" onClick={this.goToPlaylists} />\n\n            </div>\n\n        );\n    }\n}\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}