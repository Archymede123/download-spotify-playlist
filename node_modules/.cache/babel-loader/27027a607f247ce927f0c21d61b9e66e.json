{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport Blindtest from './Blindtest';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.manageMusic = function () {\n      _this.interval = setInterval(function () {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          var currentSong = response.item.name;\n\n          var songplayed = _toConsumableArray(_this.state.songplayed).concat([currentSong]);\n\n          _this.setState({\n            songplayed: songplayed\n          });\n        });\n        spotifyApi.skipToNext();\n      }, 30000);\n    };\n\n    _this.updateScore = function () {\n      var score = _this.state.score;\n      score += 1;\n\n      _this.setState({\n        score: score\n      });\n    };\n\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      blindtestLength: 3,\n      sessionEnded: false\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionEnded: true\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.manageMusic();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"informations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Welcome to the blindtest \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"You currently have \", this.state.score, \" points\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Previously played songs: \"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.state.songplayed.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, song);\n      }))), this.state.sessionEnded && React.createElement(Blindtest, {\n        access_token: this.props.access_token,\n        updateScore: this.updateScore,\n        gameStarted: this.props.gameStarted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","Blindtest","spotifyApi","BlindtestSession","props","manageMusic","interval","setInterval","getMyCurrentPlaybackState","then","response","currentSong","item","name","songplayed","state","setState","skipToNext","updateScore","score","blindtestLength","sessionEnded","length","clearInterval","map","song","key","access_token","gameStarted"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,UAAU,GAAG,IAAIF,aAAJ,EAAnB;;IAEMG,gB;;;;;AACF,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,0FAAMA,KAAN;;AADe,UAUnBC,WAVmB,GAUL,YAAM;AAChB,YAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAC9BL,QAAAA,UAAU,CAACM,yBAAX,GACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,cAAIC,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAhC;;AACA,cAAIC,UAAU,sBAAO,MAAKC,KAAL,CAAWD,UAAlB,UAA8BH,WAA9B,EAAd;;AACA,gBAAKK,QAAL,CAAc;AAAEF,YAAAA,UAAU,EAAVA;AAAF,WAAd;AACH,SALL;AAMAZ,QAAAA,UAAU,CAACe,UAAX;AACH,OAR0B,EAQxB,KARwB,CAA3B;AASH,KApBkB;;AAAA,UAsBnBC,WAtBmB,GAsBL,YAAM;AAChB,UAAIC,KAAK,GAAG,MAAKJ,KAAL,CAAWI,KAAvB;AACAA,MAAAA,KAAK,IAAI,CAAT;;AACA,YAAKH,QAAL,CAAc;AAAEG,QAAAA,KAAK,EAALA;AAAF,OAAd;AACH,KA1BkB;;AAEf,UAAKJ,KAAL,GAAa;AACTI,MAAAA,KAAK,EAAE,CADE;AAETL,MAAAA,UAAU,EAAE,EAFH;AAGTM,MAAAA,eAAe,EAAE,CAHR;AAITC,MAAAA,YAAY,EAAE;AAJL,KAAb;AAFe;AAQlB;;;;yCAoBoB;AACjB,UAAI,KAAKN,KAAL,CAAWD,UAAX,CAAsBQ,MAAtB,KAAiC,KAAKP,KAAL,CAAWK,eAAhD,EAAiE;AAC7DG,QAAAA,aAAa,CAAC,KAAKjB,QAAN,CAAb;AACA,aAAKU,QAAL,CAAc;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACH;AACJ;;;wCAEmB;AAChB,WAAKhB,WAAL;AACH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAuB,KAAKU,KAAL,CAAWI,KAAlC,YAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKJ,KAAL,CAAWD,UAAX,CAAsBU,GAAtB,CAA0B,UAACC,IAAD,EAAOC,GAAP;AAAA,eACvB;AAAI,UAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAeD,IAAf,CADuB;AAAA,OAA1B,CADL,CAJJ,CAFJ,EAYK,KAAKV,KAAL,CAAWM,YAAX,IACG,oBAAC,SAAD;AACI,QAAA,YAAY,EAAE,KAAKjB,KAAL,CAAWuB,YAD7B;AAEI,QAAA,WAAW,EAAE,KAAKT,WAFtB;AAGI,QAAA,WAAW,EAAE,KAAKd,KAAL,CAAWwB,WAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbR,CADJ;AAwBH;;;;EAjE0B7B,S;;AAoE/B,eAAeI,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// my components\nimport Blindtest from './Blindtest'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            songplayed: [],\n            blindtestLength: 3,\n            sessionEnded: false,\n        }\n    }\n\n    manageMusic = () => {\n        this.interval = setInterval(() => {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    let currentSong = response.item.name\n                    let songplayed = [...this.state.songplayed, currentSong]\n                    this.setState({ songplayed })\n                })\n            spotifyApi.skipToNext()\n        }, 30000)\n    }\n\n    updateScore = () => {\n        let score = this.state.score\n        score += 1\n        this.setState({ score })\n    }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength) {\n            clearInterval(this.interval)\n            this.setState({ sessionEnded: true })\n        }\n    }\n\n    componentDidMount() {\n        this.manageMusic()\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n\n                <div className=\"informations\">\n                    <p>Welcome to the blindtest </p>\n                    <p>You currently have {this.state.score} points</p>\n                    <p>Previously played songs: </p>\n                    <ul>\n                        {this.state.songplayed.map((song, key) =>\n                            <li key={key}>{song}</li>\n                        )}\n                    </ul>\n                </div>\n                {this.state.sessionEnded &&\n                    <Blindtest\n                        access_token={this.props.access_token}\n                        updateScore={this.updateScore}\n                        gameStarted={this.props.gameStarted}\n                    />\n                }\n\n            </div>\n\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}