{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown';\nvar spotifyApi = new SpotifyWebApi();\n\nvar Blindtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blindtest, _Component);\n\n  function Blindtest(props) {\n    var _this;\n\n    _classCallCheck(this, Blindtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blindtest).call(this, props));\n\n    _this.playBlindtest = function (event) {\n      _this.setState({\n        blindtestGuess: event.currentTarget.value\n      });\n\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        _this.setState({\n          currentSong: response.item.name\n        });\n      });\n    };\n\n    _this.stopCountdown = function () {\n      _this.setState({\n        gameStarted: false\n      });\n    };\n\n    var gameStarted = _this.props.gameStarted;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false,\n      gameStarted: gameStarted,\n      timeToGuess: 500\n    };\n    return _this;\n  }\n\n  _createClass(Blindtest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n      this.setState({\n        gameStarted: false\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.gameStarted !== this.props.gameStarted) {\n        var gameStarted = !this.state.gameStarted;\n        this.setState({\n          gameStarted: gameStarted\n        });\n      }\n\n      if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n        if (this._isMounted) {\n          this.props.updateScore();\n          this.setState({\n            blindtestGuess: \"\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.gameStarted) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(Countdown, {\n          stopCountdown: this.stopCountdown,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"answer-input\",\n          type: \"text\",\n          onChange: this.playBlindtest,\n          value: this.state.blindtestGuess,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Blindtest;\n}(Component);\n\nexport default Blindtest;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js"],"names":["React","Component","SpotifyWebApi","Countdown","spotifyApi","Blindtest","props","playBlindtest","event","setState","blindtestGuess","currentTarget","value","getMyCurrentPlaybackState","then","response","currentSong","item","name","stopCountdown","gameStarted","state","answerIsCorrect","timeToGuess","setAccessToken","access_token","prevProps","toLowerCase","_isMounted","updateScore"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,UAAU,GAAG,IAAIF,aAAJ,EAAnB;;IAIMG,S;;;;;AACF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;;AADe,UAcnBC,aAdmB,GAcH,UAACC,KAAD,EAAW;AACvB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAEF,KAAK,CAACG,aAAN,CAAoBC;AAAtC,OAAd;;AACAR,MAAAA,UAAU,CAACS,yBAAX,GACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,cAAKN,QAAL,CAAc;AAAEO,UAAAA,WAAW,EAAED,QAAQ,CAACE,IAAT,CAAcC;AAA7B,SAAd;AACH,OAHL;AAIH,KApBkB;;AAAA,UAsBnBC,aAtBmB,GAsBH,YAAM;AAClB,YAAKV,QAAL,CAAc;AAAEW,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH,KAxBkB;;AAEf,QAAIA,WAAW,GAAG,MAAKd,KAAL,CAAWc,WAA7B;AACA,UAAKC,KAAL,GAAa;AACTL,MAAAA,WAAW,EAAE,EADJ;AAETN,MAAAA,cAAc,EAAE,EAFP;AAGTY,MAAAA,eAAe,EAAE,KAHR;AAITF,MAAAA,WAAW,EAAXA,WAJS;AAKTG,MAAAA,WAAW,EAAE;AALJ,KAAb;AAHe;AAUlB;;;;wCAgBmB;AAChBnB,MAAAA,UAAU,CAACoB,cAAX,CAA0B,KAAKlB,KAAL,CAAWmB,YAArC;AACA,WAAKhB,QAAL,CAAc;AAAEW,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH;;;uCAEkBM,S,EAAW;AAC1B,UAAIA,SAAS,CAACN,WAAV,KAA0B,KAAKd,KAAL,CAAWc,WAAzC,EAAsD;AAClD,YAAIA,WAAW,GAAG,CAAC,KAAKC,KAAL,CAAWD,WAA9B;AACA,aAAKX,QAAL,CAAc;AAAEW,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACH;;AAED,UAAI,KAAKC,KAAL,CAAWX,cAAX,KAA8B,EAA9B,IAAoC,KAAKW,KAAL,CAAWL,WAAX,CAAuBW,WAAvB,OAAyC,KAAKN,KAAL,CAAWX,cAAX,CAA0BiB,WAA1B,EAAjF,EAA0H;AACtH,YAAI,KAAKC,UAAT,EAAqB;AACjB,eAAKtB,KAAL,CAAWuB,WAAX;AACA,eAAKpB,QAAL,CAAc;AAAEC,YAAAA,cAAc,EAAE;AAAlB,WAAd;AACH;AACJ;AACJ;;;6BAEQ;AACL,UAAI,KAAKW,KAAL,CAAWD,WAAf,EAA4B;AACxB,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,SAAD;AAAW,UAAA,aAAa,EAAE,KAAKD,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI;AAAO,UAAA,SAAS,EAAC,cAAjB;AAAgC,UAAA,IAAI,EAAC,MAArC;AAA4C,UAAA,QAAQ,EAC/C,KAAKZ,aADV;AACyB,UAAA,KAAK,EAAE,KAAKc,KAAL,CAAWX,cAD3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CADJ;AAOH,OARD,MAQO;AACH,eAAO,IAAP;AACH;AACJ;;;;EA1DmBT,S;;AA6DxB,eAAeI,SAAf","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown'\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass Blindtest extends Component {\n    constructor(props) {\n        super(props);\n        let gameStarted = this.props.gameStarted\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false,\n            gameStarted,\n            timeToGuess: 500\n        }\n    }\n\n\n\n    playBlindtest = (event) => {\n        this.setState({ blindtestGuess: event.currentTarget.value })\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => {\n                this.setState({ currentSong: response.item.name })\n            })\n    }\n\n    stopCountdown = () => {\n        this.setState({ gameStarted: false })\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        this.setState({ gameStarted: false })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.gameStarted !== this.props.gameStarted) {\n            let gameStarted = !this.state.gameStarted\n            this.setState({ gameStarted })\n        }\n\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n            if (this._isMounted) {\n                this.props.updateScore()\n                this.setState({ blindtestGuess: \"\" })\n            }\n        }\n    }\n\n    render() {\n        if (this.state.gameStarted) {\n            return (\n                <div>\n                    <Countdown stopCountdown={this.stopCountdown} />\n                    <input className=\"answer-input\" type=\"text\" onChange=\n                        {this.playBlindtest} value={this.state.blindtestGuess} />\n                </div>\n            )\n        } else {\n            return null\n        }\n    }\n}\n\nexport default Blindtest;"]},"metadata":{},"sourceType":"module"}