{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport AristSelector from './ArtistSelector';\nimport SessionInformations from './SessionInformations'; // js \n\nimport { updateScore, getTotalScore } from '../../api/score'; //css\n\nimport '../../css/BlindtestSession.css';\nimport '../../css/SessionInformations.css';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.getCurrentPlayedSong = function () {\n      setTimeout(function () {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          var currentData = {\n            song: response.item.name,\n            artist: {\n              name: response.item.artists[0].name,\n              id: response.item.artists[0].id\n            }\n          };\n\n          _this.setState({\n            currentData: currentData\n          });\n        });\n      }, 300);\n    };\n\n    _this.timer = function () {\n      _this.getCurrentPlayedSong();\n\n      _this.interval = setInterval(function () {\n        var remainingTime = _this.state.remainingTime;\n        remainingTime -= 1;\n\n        _this.setState({\n          remainingTime: remainingTime\n        });\n\n        if (remainingTime < 1) {\n          clearInterval(_this.interval);\n\n          _this.updateResultList(_this.state.currentData.song);\n\n          _this.nextSong();\n        }\n      }, 1000);\n    };\n\n    _this.nextSong = function () {\n      _this.setState({\n        remainingTime: _this.state.timeToGuess\n      });\n\n      _this.timer();\n\n      spotifyApi.skipToNext();\n    };\n\n    _this.updateResultList = function (track) {\n      if (!_this.state.songplayed.includes(track)) {\n        var songplayed = _toConsumableArray(_this.state.songplayed).concat([track]);\n\n        _this.setState({\n          songplayed: songplayed\n        });\n      }\n    };\n\n    _this.submitAnswer = function (artist) {\n      clearInterval(_this.interval);\n      var timeSpent = _this.state.timeToGuess - _this.state.remainingTime;\n      var correct = _this.state.currentData.artist.name === artist ? true : false;\n\n      var answers = _toConsumableArray(_this.state.answers).concat([{\n        answer: artist,\n        correct: correct,\n        timeSpent: timeSpent\n      }]);\n\n      _this.setState({\n        answers: answers\n      }, function () {\n        return _this.updateScore();\n      });\n\n      _this.nextSong();\n    };\n\n    _this.updateScore = function () {\n      console.log(_this.state.remainingTime);\n      var answers = updateScore(_this.state.answers, _this.state.timeToGuess);\n      var score = getTotalScore(answers);\n\n      _this.setState({\n        score: score,\n        answers: answers\n      });\n\n      _this.updateResultList(_this.state.currentData.song);\n    };\n\n    var timeToGuess = 30;\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      answers: [],\n      blindtestLength: 9,\n      sessionOn: false,\n      timeToGuess: timeToGuess,\n      remainingTime: timeToGuess\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionOn: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.timer();\n      this.setState({\n        sessionOn: true\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"played-song\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.state.songplayed.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, song);\n      })), React.createElement(\"div\", {\n        className: \"current-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(SessionInformations, {\n        score: this.state.score,\n        remainingTime: this.state.remainingTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), this.state.sessionOn && this.state.currentData && React.createElement(AristSelector, {\n        currentData: this.state.currentData,\n        submitAnswer: this.submitAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","AristSelector","SessionInformations","updateScore","getTotalScore","spotifyApi","BlindtestSession","props","getCurrentPlayedSong","setTimeout","getMyCurrentPlaybackState","then","response","currentData","song","item","name","artist","artists","id","setState","timer","interval","setInterval","remainingTime","state","clearInterval","updateResultList","nextSong","timeToGuess","skipToNext","track","songplayed","includes","submitAnswer","timeSpent","correct","answers","answer","console","log","score","blindtestLength","sessionOn","length","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js'\n\n// my components\nimport AristSelector from './ArtistSelector'\nimport SessionInformations from './SessionInformations'\n\n// js \nimport { updateScore, getTotalScore } from '../../api/score'\n\n\n//css\nimport '../../css/BlindtestSession.css'\nimport '../../css/SessionInformations.css'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        let timeToGuess = 30\n        this.state = {\n            score: 0,\n            songplayed: [],\n            answers: [],\n            blindtestLength: 9,\n            sessionOn: false,\n            timeToGuess,\n            remainingTime: timeToGuess\n        }\n    }\n\n    getCurrentPlayedSong = () => {\n        setTimeout(() => {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    let currentData = {\n                        song: response.item.name,\n                        artist: {\n                            name: response.item.artists[0].name,\n                            id: response.item.artists[0].id\n                        }\n                    }\n                    this.setState({ currentData })\n                })\n        }, 300);\n    }\n\n\n    timer = () => {\n        this.getCurrentPlayedSong()\n        this.interval = setInterval(() => {\n            let remainingTime = this.state.remainingTime\n            remainingTime -= 1\n            this.setState({ remainingTime })\n            if (remainingTime < 1) {\n                clearInterval(this.interval)\n                this.updateResultList(this.state.currentData.song)\n                this.nextSong()\n            }\n        }, 1000)\n    }\n\n    nextSong = () => {\n        this.setState({ remainingTime: this.state.timeToGuess })\n        this.timer()\n        spotifyApi.skipToNext()\n    }\n\n\n    updateResultList = (track) => {\n        if (!this.state.songplayed.includes(track)) {\n            let songplayed = [...this.state.songplayed, track]\n            this.setState({ songplayed })\n        }\n    }\n\n    submitAnswer = (artist) => {\n        clearInterval(this.interval)\n        let timeSpent = this.state.timeToGuess - this.state.remainingTime\n        let correct = this.state.currentData.artist.name === artist ? true : false\n        let answers = [...this.state.answers, { answer: artist, correct, timeSpent }]\n        this.setState({ answers }, () => this.updateScore())\n        this.nextSong()\n    }\n\n    updateScore = () => {\n        console.log(this.state.remainingTime)\n        let answers = updateScore(this.state.answers, this.state.timeToGuess)\n        let score = getTotalScore(answers)\n        this.setState({ score, answers })\n        this.updateResultList(this.state.currentData.song)\n    }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n            clearInterval(this.interval)\n            this.setState({ sessionOn: false })\n        }\n    }\n\n    componentDidMount() {\n        this.timer()\n        this.setState({ sessionOn: true })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n                <ul className=\"played-song\">\n                    {this.state.songplayed.map((song, key) =>\n                        <li key={key}>{song}</li>\n                    )}\n                </ul>\n                <div className=\"current-session\">\n                    <SessionInformations\n                        score={this.state.score}\n                        remainingTime={this.state.remainingTime}\n                    />\n                    {this.state.sessionOn && this.state.currentData &&\n                        <AristSelector\n                            currentData={this.state.currentData}\n                            submitAnswer={this.submitAnswer}\n                        />\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}