{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n// import FindArtist from './FindArtist'\n\nimport AristSelector from './ArtistSelector';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.getCurrentPlayedSong = function () {\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        var currentData = {\n          song: response.item.name,\n          artist: {\n            name: response.item.artists[0].name,\n            id: response.item.artists[0].id\n          }\n        };\n\n        _this.setState({\n          currentData: currentData\n        });\n      });\n    };\n\n    _this.manageMusic = function () {\n      _this.interval = setInterval(function () {\n        _this.getCurrentPlayedSong();\n\n        _this.updateResultList(_this.state.currentData.song); // this.toggleSong()\n\n\n        spotifyApi.skipToNext();\n      }, _this.state.timeToGuess);\n    };\n\n    _this.updateResultList = function (track) {\n      if (!_this.state.songplayed.includes(track)) {\n        var songplayed = _toConsumableArray(_this.state.songplayed).concat([track]);\n\n        _this.setState({\n          songplayed: songplayed\n        });\n      }\n    };\n\n    _this.updateScore = function () {\n      var score = _this.state.score;\n      score += 1;\n\n      _this.setState({\n        score: score\n      });\n\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        return _this.updateResultList(response.item.name);\n      });\n    };\n\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      blindtestLength: 3,\n      sessionOn: false,\n      timeToGuess: 5000 // currentData: {}\n\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    // toggleSong = () => {\n    //     let switchedSong = !this.state.switchedSong\n    //     this.setState({ switchedSong })\n    // }\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionOn: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.getCurrentPlayedSong();\n\n        _this2.manageMusic();\n\n        _this2.setState({\n          sessionOn: true\n        });\n      }, 100);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"informations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Welcome to the blindtest \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"You currently have \", this.state.score, \" points\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Previously played songs: \"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.songplayed.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, song);\n      }))), this.state.sessionOn & this.state.currentData && React.createElement(AristSelector, {\n        currentData: this.state.currentData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }) // <FindArtist\n      //     timeToGuess={this.state.timeToGuess}\n      //     access_token={this.props.access_token}\n      //     updateScore={this.updateScore}\n      //     // toggleSong={this.state.toggleSong}\n      //     currentData={this.state.currentData}\n      // />\n      );\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","AristSelector","spotifyApi","BlindtestSession","props","getCurrentPlayedSong","getMyCurrentPlaybackState","then","response","currentData","song","item","name","artist","artists","id","setState","manageMusic","interval","setInterval","updateResultList","state","skipToNext","timeToGuess","track","songplayed","includes","updateScore","score","blindtestLength","sessionOn","length","clearInterval","setTimeout","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// my components\n\n// import FindArtist from './FindArtist'\nimport AristSelector from './ArtistSelector';\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            songplayed: [],\n            blindtestLength: 3,\n            sessionOn: false,\n            timeToGuess: 5000,\n            // currentData: {}\n        }\n    }\n\n    getCurrentPlayedSong = () => {\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => {\n                let currentData = {\n                    song: response.item.name,\n                    artist: {\n                        name: response.item.artists[0].name,\n                        id: response.item.artists[0].id\n                    }\n                }\n                this.setState({ currentData })\n            })\n    }\n\n    manageMusic = () => {\n        this.interval = setInterval(() => {\n            this.getCurrentPlayedSong()\n            this.updateResultList(this.state.currentData.song)\n            // this.toggleSong()\n            spotifyApi.skipToNext()\n        }, this.state.timeToGuess)\n    }\n\n    updateResultList = (track) => {\n        if (!this.state.songplayed.includes(track)) {\n            let songplayed = [...this.state.songplayed, track]\n            this.setState({ songplayed })\n        }\n    }\n\n    updateScore = () => {\n        let score = this.state.score\n        score += 1\n        this.setState({ score })\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => this.updateResultList(response.item.name))\n    }\n\n    // toggleSong = () => {\n    //     let switchedSong = !this.state.switchedSong\n    //     this.setState({ switchedSong })\n    // }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n            clearInterval(this.interval)\n            this.setState({ sessionOn: false })\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.getCurrentPlayedSong()\n            this.manageMusic()\n            this.setState({ sessionOn: true })\n        }, 100);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n\n                <div className=\"informations\">\n                    <p>Welcome to the blindtest </p>\n                    <p>You currently have {this.state.score} points</p>\n                    <p>Previously played songs: </p>\n                    <ul>\n                        {this.state.songplayed.map((song, key) =>\n                            <li key={key}>{song}</li>\n                        )}\n                    </ul>\n                </div>\n                {this.state.sessionOn & this.state.currentData &&\n                    <AristSelector\n                        currentData={this.state.currentData}\n                    />\n                    // <FindArtist\n                    //     timeToGuess={this.state.timeToGuess}\n                    //     access_token={this.props.access_token}\n                    //     updateScore={this.updateScore}\n                    //     // toggleSong={this.state.toggleSong}\n                    //     currentData={this.state.currentData}\n                    // />\n                }\n            </div>\n\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}