{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nvar Blindtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blindtest, _Component);\n\n  function Blindtest(props) {\n    var _this;\n\n    _classCallCheck(this, Blindtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blindtest).call(this, props));\n    _this._isMounted = true;\n\n    _this.playBlindtest = function (event) {\n      if (_this._isMounted) {\n        _this.setState({\n          blindtestGuess: event.currentTarget.value\n        });\n\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          _this.setState({\n            currentSong: response.item.name\n          });\n        });\n      }\n    };\n\n    _this.timeCounter = function () {\n      if (_this.state.gameStarted) {\n        var interval = setInterval(function () {\n          var timeToGuess = _this.state.timeToGuess;\n          timeToGuess -= 1;\n\n          _this.setState({\n            timeToGuess: timeToGuess\n          });\n\n          if (_this.state.timeToGuess < 1) {\n            clearInterval(interval);\n\n            _this.setState({\n              gameStarted: false,\n              timeToGuess: 10\n            });\n          }\n        }, 1000);\n      }\n    };\n\n    var gameStarted = _this.props.gameStarted;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false,\n      gameStarted: gameStarted,\n      timeToGuess: 500\n    };\n    return _this;\n  }\n\n  _createClass(Blindtest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n      this.setState({\n        gameStarted: false\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.gameStarted !== this.props.gameStarted) {\n        var gameStarted = !this.state.gameStarted;\n        this.setState({\n          gameStarted: gameStarted\n        });\n        this.timeCounter();\n      }\n\n      if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n        if (this._isMounted) {\n          this.props.updateScore();\n          this.setState({\n            blindtestGuess: \"\"\n          });\n        }\n      } // if (this.state.timeToGuess === 0) {\n      //     let gameStarted = !this.state.gameStarted\n      //     this.setState({ gameStarted })\n      // }\n\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      this.setState({\n        gameStarted: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.gameStarted) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, \"Try to guess the song now playing\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"You have \", this.state.timeToGuess, \" left, hurry up motherfucker\"), React.createElement(\"input\", {\n          className: \"answer-input\",\n          type: \"text\",\n          onChange: this.playBlindtest,\n          value: this.state.blindtestGuess,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }));\n      } else {\n        return null;\n      } // let answerIsCorrect = this.state.answerIsCorrect\n      // {this.state.gameStarted  \n      //     ? return (\n      //         <div>\n      //             <p>Try to guess the song now playing</p>\n      //             <input className=\"answer-input\" type=\"text\" onChange=\n      //                 {this.playBlindtest} value={this.state.blindtestGuess} />\n      //         </div>\n      //     )\n      //     : return (null)\n      // }\n      // return (\n      //     {this.state.gameStarted \n      //         ? <div className=\"blindest\">\n      //             {this.state.gameStarted &&\n      //                 <div>\n      //                     <p>Try to guess the song now playing</p>\n      //                     <input className=\"answer-input\" type=\"text\" onChange=\n      //                         {this.playBlindtest} value={this.state.blindtestGuess} />\n      //                 </div>\n      //             }\n      //             {/* {this.state.blindtestGuess !== \"\" ?\n      //             (answerIsCorrect\n      //                 ? <p>you're good</p>\n      //                 : <p>keep going</p>\n      //             )\n      //             : null\n      //         } */}\n      //         </div>\n      //     : null\n      // }\n      // );\n\n    }\n  }]);\n\n  return Blindtest;\n}(Component);\n\nexport default Blindtest;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","Blindtest","props","_isMounted","playBlindtest","event","setState","blindtestGuess","currentTarget","value","getMyCurrentPlaybackState","then","response","currentSong","item","name","timeCounter","state","gameStarted","interval","setInterval","timeToGuess","clearInterval","answerIsCorrect","setAccessToken","access_token","prevProps","toLowerCase","updateScore"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass Blindtest extends Component {\n    constructor(props) {\n        super(props);\n        let gameStarted = this.props.gameStarted\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false,\n            gameStarted: gameStarted,\n            timeToGuess: 500\n        }\n    }\n\n    _isMounted = true\n\n    playBlindtest = (event) => {\n        if (this._isMounted) {\n            this.setState({ blindtestGuess: event.currentTarget.value })\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    this.setState({ currentSong: response.item.name })\n                })\n        }\n    }\n\n    timeCounter = () => {\n        if (this.state.gameStarted) {\n            let interval = setInterval(() => {\n                let timeToGuess = this.state.timeToGuess\n                timeToGuess -= 1\n                this.setState({ timeToGuess })\n                if (this.state.timeToGuess < 1) {\n                    clearInterval(interval)\n                    this.setState({\n                        gameStarted: false,\n                        timeToGuess: 10\n                    })\n                }\n            }, 1000)\n        }\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        this.setState({ gameStarted: false })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.gameStarted !== this.props.gameStarted) {\n            let gameStarted = !this.state.gameStarted\n            this.setState({ gameStarted })\n            this.timeCounter()\n        }\n\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n            if (this._isMounted) {\n                this.props.updateScore()\n                this.setState({ blindtestGuess: \"\" })\n            }\n        }\n\n        // if (this.state.timeToGuess === 0) {\n        //     let gameStarted = !this.state.gameStarted\n        //     this.setState({ gameStarted })\n        // }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        this.setState({ gameStarted: false })\n    }\n\n    render() {\n        if (this.state.gameStarted) {\n            return (\n                <div>\n                    <p>Try to guess the song now playing</p>\n                    <p>You have {this.state.timeToGuess} left, hurry up motherfucker</p>\n                    <input className=\"answer-input\" type=\"text\" onChange=\n                        {this.playBlindtest} value={this.state.blindtestGuess} />\n                </div>\n            )\n        } else {\n            return null\n        }\n\n        // let answerIsCorrect = this.state.answerIsCorrect\n        // {this.state.gameStarted  \n        //     ? return (\n        //         <div>\n        //             <p>Try to guess the song now playing</p>\n        //             <input className=\"answer-input\" type=\"text\" onChange=\n        //                 {this.playBlindtest} value={this.state.blindtestGuess} />\n        //         </div>\n        //     )\n        //     : return (null)\n        // }\n\n        // return (\n        //     {this.state.gameStarted \n        //         ? <div className=\"blindest\">\n        //             {this.state.gameStarted &&\n        //                 <div>\n        //                     <p>Try to guess the song now playing</p>\n        //                     <input className=\"answer-input\" type=\"text\" onChange=\n        //                         {this.playBlindtest} value={this.state.blindtestGuess} />\n        //                 </div>\n        //             }\n\n        //             {/* {this.state.blindtestGuess !== \"\" ?\n        //             (answerIsCorrect\n        //                 ? <p>you're good</p>\n        //                 : <p>keep going</p>\n        //             )\n        //             : null\n        //         } */}\n        //         </div>\n\n        //     : null\n        // }\n\n        // );\n\n\n    }\n}\n\nexport default Blindtest;"]},"metadata":{},"sourceType":"module"}