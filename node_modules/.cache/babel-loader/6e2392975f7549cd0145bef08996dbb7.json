{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/PlaylistPicker.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // content\n\nimport spotifyPlaylists from './SpotifyPlaylists';\nvar spotifyApi = new SpotifyWebApi();\n\nvar PlaylistPicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlaylistPicker, _Component);\n\n  function PlaylistPicker(props) {\n    var _this;\n\n    _classCallCheck(this, PlaylistPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlaylistPicker).call(this, props));\n\n    _this.handleChange = function (event) {\n      var selectedOption = event.target;\n      var name = selectedOption.options[selectedOption.selectedIndex].getAttribute('name');\n      var id = selectedOption.value;\n      var playlist = {\n        name: name,\n        id: id\n      };\n\n      _this.setState({\n        playlist: playlist\n      });\n\n      _this.props.selectPlaylist(playlist);\n\n      _this.fetchPlaylist(playlist.id);\n    };\n\n    _this.fetchPlaylist = function (playlistId) {\n      console.log('fetching');\n      spotifyApi.getPlaylist(playlistId).then(function (response) {\n        var playlistLength = response.tracks.items.length;\n\n        _this.setState({\n          playlistLength: playlistLength\n        });\n      });\n    };\n\n    _this.state = {\n      spotifyPlaylists: spotifyPlaylists\n    };\n    return _this;\n  }\n\n  _createClass(PlaylistPicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Select a playlist from the list\"), React.createElement(\"select\", {\n        name: \"playlistList\",\n        id: \"playlistList\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"placeholder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \" -- select an option -- \"), this.state.spotifyPlaylists.map(function (playlist, key) {\n        return React.createElement(\"option\", {\n          key: key,\n          name: playlist.name,\n          value: playlist.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, playlist.name);\n      })), this.state.playlistLength && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"There are \", this.state.playlistLength, \" tracks in this playlist\"));\n    }\n  }]);\n\n  return PlaylistPicker;\n}(Component);\n\nexport default PlaylistPicker;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/PlaylistPicker.js"],"names":["React","Component","SpotifyWebApi","spotifyPlaylists","spotifyApi","PlaylistPicker","props","handleChange","event","selectedOption","target","name","options","selectedIndex","getAttribute","id","value","playlist","setState","selectPlaylist","fetchPlaylist","playlistId","console","log","getPlaylist","then","response","playlistLength","tracks","items","length","state","setAccessToken","access_token","map","key"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B,C,CAEA;;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,IAAMC,UAAU,GAAG,IAAIF,aAAJ,EAAnB;;IAEMG,c;;;;;AACF,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,wFAAMA,KAAN;;AADe,UAOnBC,YAPmB,GAOJ,UAACC,KAAD,EAAW;AACtB,UAAIC,cAAc,GAAGD,KAAK,CAACE,MAA3B;AACA,UAAIC,IAAI,GAAGF,cAAc,CAACG,OAAf,CAAuBH,cAAc,CAACI,aAAtC,EAAqDC,YAArD,CAAkE,MAAlE,CAAX;AACA,UAAIC,EAAE,GAAGN,cAAc,CAACO,KAAxB;AACA,UAAIC,QAAQ,GAAG;AACXN,QAAAA,IAAI,EAAJA,IADW;AAEXI,QAAAA,EAAE,EAAFA;AAFW,OAAf;;AAIA,YAAKG,QAAL,CAAc;AAAED,QAAAA,QAAQ,EAARA;AAAF,OAAd;;AACA,YAAKX,KAAL,CAAWa,cAAX,CAA0BF,QAA1B;;AACA,YAAKG,aAAL,CAAmBH,QAAQ,CAACF,EAA5B;AACH,KAlBkB;;AAAA,UAoBnBK,aApBmB,GAoBH,UAACC,UAAD,EAAgB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAnB,MAAAA,UAAU,CAACoB,WAAX,CAAuBH,UAAvB,EAAmCI,IAAnC,CAAwC,UAAAC,QAAQ,EAAI;AAChD,YAAIC,cAAc,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,KAAhB,CAAsBC,MAA3C;;AACA,cAAKZ,QAAL,CAAc;AAAES,UAAAA,cAAc,EAAdA;AAAF,SAAd;AACH,OAHD;AAIH,KA1BkB;;AAEf,UAAKI,KAAL,GAAa;AACT5B,MAAAA,gBAAgB,EAAhBA;AADS,KAAb;AAFe;AAKlB;;;;wCAuBmB;AAChBC,MAAAA,UAAU,CAAC4B,cAAX,CAA0B,KAAK1B,KAAL,CAAW2B,YAArC;AACH;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,EAEI;AAAQ,QAAA,IAAI,EAAC,cAAb;AAA4B,QAAA,EAAE,EAAC,cAA/B;AAA8C,QAAA,QAAQ,EAAE,KAAK1B,YAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,EAEK,KAAKwB,KAAL,CAAW5B,gBAAX,CAA4B+B,GAA5B,CAAgC,UAACjB,QAAD,EAAWkB,GAAX;AAAA,eAC7B;AAAQ,UAAA,GAAG,EAAEA,GAAb;AAAkB,UAAA,IAAI,EAAElB,QAAQ,CAACN,IAAjC;AAAuC,UAAA,KAAK,EAAEM,QAAQ,CAACF,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4DE,QAAQ,CAACN,IAArE,CAD6B;AAAA,OAAhC,CAFL,CAFJ,EAQK,KAAKoB,KAAL,CAAWJ,cAAX,IACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAc,KAAKI,KAAL,CAAWJ,cAAzB,6BATR,CADJ;AAcH;;;;EAhDwB1B,S;;AAmD7B,eAAeI,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// content\nimport spotifyPlaylists from './SpotifyPlaylists'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass PlaylistPicker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spotifyPlaylists\n        }\n    }\n\n    handleChange = (event) => {\n        let selectedOption = event.target\n        let name = selectedOption.options[selectedOption.selectedIndex].getAttribute('name')\n        let id = selectedOption.value\n        let playlist = {\n            name,\n            id\n        }\n        this.setState({ playlist })\n        this.props.selectPlaylist(playlist)\n        this.fetchPlaylist(playlist.id)\n    }\n\n    fetchPlaylist = (playlistId) => {\n        console.log('fetching')\n        spotifyApi.getPlaylist(playlistId).then(response => {\n            let playlistLength = response.tracks.items.length\n            this.setState({ playlistLength })\n        })\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Select a playlist from the list</p>\n                <select name=\"playlistList\" id=\"playlistList\" onChange={this.handleChange}>\n                    <option value=\"placeholder\"> -- select an option -- </option>\n                    {this.state.spotifyPlaylists.map((playlist, key) =>\n                        <option key={key} name={playlist.name} value={playlist.id}>{playlist.name}</option>\n                    )}\n                </select>\n                {this.state.playlistLength &&\n                    <p>There are {this.state.playlistLength} tracks in this playlist</p>\n                }\n            </div>\n        );\n    }\n}\n\nexport default PlaylistPicker;"]},"metadata":{},"sourceType":"module"}