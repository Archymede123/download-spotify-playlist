{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/ArtistSelector.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nvar AristSelector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AristSelector, _Component);\n\n  function AristSelector(props) {\n    var _this;\n\n    _classCallCheck(this, AristSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AristSelector).call(this, props));\n\n    _this.getRelatedArtist = function (artistId) {\n      _this.setState({\n        relatedArtists: []\n      });\n\n      spotifyApi.getArtistRelatedArtists(artistId).then(function (response) {\n        response.artists.map(function (artist) {\n          var imageUrl = artist.images[1] ? artist.images[1].url : \"\";\n\n          var relatedArtists = _toConsumableArray(_this.state.relatedArtists).concat([{\n            name: artist.name,\n            imageUrl: imageUrl,\n            popularity: artist.popularity\n          }]);\n\n          return _this.setState({\n            relatedArtists: relatedArtists\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      relatedArtists: []\n    };\n    return _this;\n  }\n\n  _createClass(AristSelector, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.currentArtist !== this.props.currentArtist) {\n        this.getRelatedArtist(this.props.currentArtist.id);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"zkjgzerlng\");\n      this.getRelatedArtist(this.props.currentArtist.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"L'artiste est ...\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, this.state.relatedArtists.slice(0, 3).map(function (artist, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: artist.imageUrl,\n          alt: artist.name,\n          className: \"artist-avatar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }), artist.name);\n      })));\n    }\n  }]);\n\n  return AristSelector;\n}(Component);\n\nexport default AristSelector;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/ArtistSelector.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","AristSelector","props","getRelatedArtist","artistId","setState","relatedArtists","getArtistRelatedArtists","then","response","artists","map","artist","imageUrl","images","url","state","name","popularity","prevProps","currentArtist","id","console","log","slice","key"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,IAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;;IAEME,a;;;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;;AADe,UAQnBC,gBARmB,GAQA,UAACC,QAAD,EAAc;AAC7B,YAAKC,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAAd;;AACAN,MAAAA,UAAU,CAACO,uBAAX,CAAmCH,QAAnC,EACKI,IADL,CACU,UAAAC,QAAQ,EAAI;AACdA,QAAAA,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CAAqB,UAAAC,MAAM,EAAI;AAC3B,cAAIC,QAAQ,GAAGD,MAAM,CAACE,MAAP,CAAc,CAAd,IAAmBF,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiBC,GAApC,GAA0C,EAAzD;;AACA,cAAIT,cAAc,sBAAO,MAAKU,KAAL,CAAWV,cAAlB,UAAkC;AAChDW,YAAAA,IAAI,EAAEL,MAAM,CAACK,IADmC;AAEhDJ,YAAAA,QAAQ,EAARA,QAFgD;AAGhDK,YAAAA,UAAU,EAAEN,MAAM,CAACM;AAH6B,WAAlC,EAAlB;;AAKA,iBAAO,MAAKb,QAAL,CAAc;AAAEC,YAAAA,cAAc,EAAdA;AAAF,WAAd,CAAP;AACH,SARD;AASH,OAXL;AAYH,KAtBkB;;AAGf,UAAKU,KAAL,GAAa;AACTV,MAAAA,cAAc,EAAE;AADP,KAAb;AAHe;AAMlB;;;;uCAkBkBa,S,EAAW;AAC1B,UAAIA,SAAS,CAACC,aAAV,KAA4B,KAAKlB,KAAL,CAAWkB,aAA3C,EAA0D;AACtD,aAAKjB,gBAAL,CAAsB,KAAKD,KAAL,CAAWkB,aAAX,CAAyBC,EAA/C;AACH;AACJ;;;wCAEmB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAKpB,gBAAL,CAAsB,KAAKD,KAAL,CAAWkB,aAAX,CAAyBC,EAA/C;AACH;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKL,KAAL,CAAWV,cAAX,CAA0BkB,KAA1B,CAAgC,CAAhC,EAAmC,CAAnC,EAAsCb,GAAtC,CAA0C,UAACC,MAAD,EAASa,GAAT;AAAA,eACvC;AAAI,UAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AACI,UAAA,GAAG,EAAEb,MAAM,CAACC,QADhB;AAEI,UAAA,GAAG,EAAED,MAAM,CAACK,IAFhB;AAGI,UAAA,SAAS,EAAC,eAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAKKL,MAAM,CAACK,IALZ,CADuC;AAAA,OAA1C,CAFL,CAFJ,CADJ;AAiBH;;;;EAtDuBnB,S;;AAyD5B,eAAeG,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass AristSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            relatedArtists: [],\n        }\n    }\n\n    getRelatedArtist = (artistId) => {\n        this.setState({ relatedArtists: [] })\n        spotifyApi.getArtistRelatedArtists(artistId)\n            .then(response => {\n                response.artists.map(artist => {\n                    let imageUrl = artist.images[1] ? artist.images[1].url : \"\"\n                    let relatedArtists = [...this.state.relatedArtists, {\n                        name: artist.name,\n                        imageUrl,\n                        popularity: artist.popularity\n                    }]\n                    return this.setState({ relatedArtists })\n                })\n            })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentArtist !== this.props.currentArtist) {\n            this.getRelatedArtist(this.props.currentArtist.id)\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"zkjgzerlng\")\n        this.getRelatedArtist(this.props.currentArtist.id)\n    }\n\n    render() {\n        return (\n            <div>\n                <p>L'artiste est ...</p>\n                <ul>\n\n                    {this.state.relatedArtists.slice(0, 3).map((artist, key) =>\n                        <li key={key}>\n                            <img\n                                src={artist.imageUrl}\n                                alt={artist.name}\n                                className=\"artist-avatar\" />\n                            {artist.name}\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default AristSelector;"]},"metadata":{},"sourceType":"module"}