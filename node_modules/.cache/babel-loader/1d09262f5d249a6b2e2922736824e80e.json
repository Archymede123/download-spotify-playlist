{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown';\nvar spotifyApi = new SpotifyWebApi();\n\nvar Blindtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blindtest, _Component);\n\n  function Blindtest(props) {\n    var _this;\n\n    _classCallCheck(this, Blindtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blindtest).call(this, props));\n    _this._isMounted = true;\n\n    _this.getCurrentPlayedSong = function () {\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        _this.setState({\n          currentSong: response.item.name\n        });\n      });\n    };\n\n    _this.playBlindtest = function (event) {\n      if (_this._isMounted) {\n        _this.setState({\n          blindtestGuess: event.currentTarget.value\n        });\n\n        _this.getCurrentPlayedSong();\n      }\n    };\n\n    var gameStarted = _this.props.gameStarted;\n    var timeToGuess = _this.props.timeToGuess / 1000;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false,\n      // gameStarted,\n      timeToGuess: timeToGuess,\n      toggleSong: true\n    };\n    return _this;\n  }\n\n  _createClass(Blindtest, [{\n    key: \"componentDidMount\",\n    // stopCountdown = () => {\n    //     this.setState({ gameStarted: false })\n    // }\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token); // this.setState({ gameStarted: false })\n\n      this.getCurrentPlayedSong();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // if (prevProps.gameStarted !== this.props.gameStarted) {\n      //     let gameStarted = !this.state.gameStarted\n      //     this.setState({ gameStarted })\n      // }\n      if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n        if (this._isMounted) {\n          this.props.updateScore();\n          this.setState({\n            answerIsCorrect: true\n          });\n          this.setState({\n            blindtestGuess: \"\"\n          });\n        }\n      }\n\n      if (prevProps.currentSong !== this.props.currentSong) {\n        this.setState({\n          toggleSong: !this.state.toggleSong,\n          answerIsCorrect: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      this.setState({\n        gameStarted: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Try to guess the song now playing\"), React.createElement(Countdown, {\n        timeToGuess: this.state.timeToGuess,\n        key: this.state.toggleSong,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"answer-input\",\n        type: \"text\",\n        onChange: this.playBlindtest,\n        value: this.state.blindtestGuess,\n        disabled: this.state.answerIsCorrect ? \"disabled\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Blindtest;\n}(Component);\n\nexport default Blindtest;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js"],"names":["React","Component","SpotifyWebApi","Countdown","spotifyApi","Blindtest","props","_isMounted","getCurrentPlayedSong","getMyCurrentPlaybackState","then","response","setState","currentSong","item","name","playBlindtest","event","blindtestGuess","currentTarget","value","gameStarted","timeToGuess","state","answerIsCorrect","toggleSong","setAccessToken","access_token","prevProps","prevState","toLowerCase","updateScore"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown'\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass Blindtest extends Component {\n    constructor(props) {\n        super(props);\n        let gameStarted = this.props.gameStarted\n        let timeToGuess = this.props.timeToGuess / 1000\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false,\n            // gameStarted,\n            timeToGuess,\n            toggleSong: true\n        }\n    }\n\n    _isMounted = true\n\n    getCurrentPlayedSong = () => {\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => {\n                this.setState({ currentSong: response.item.name })\n            })\n    }\n\n    playBlindtest = (event) => {\n        if (this._isMounted) {\n            this.setState({ blindtestGuess: event.currentTarget.value })\n            this.getCurrentPlayedSong()\n        }\n    }\n\n    // stopCountdown = () => {\n    //     this.setState({ gameStarted: false })\n    // }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        // this.setState({ gameStarted: false })\n        this.getCurrentPlayedSong()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // if (prevProps.gameStarted !== this.props.gameStarted) {\n        //     let gameStarted = !this.state.gameStarted\n        //     this.setState({ gameStarted })\n        // }\n\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n            if (this._isMounted) {\n                this.props.updateScore()\n                this.setState({ answerIsCorrect: true })\n                this.setState({ blindtestGuess: \"\" })\n            }\n        }\n\n        if (prevProps.currentSong !== this.props.currentSong) {\n            this.setState({\n                toggleSong: !this.state.toggleSong,\n                answerIsCorrect: false\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        this.setState({ gameStarted: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Try to guess the song now playing</p>\n                <Countdown\n                    timeToGuess={this.state.timeToGuess}\n                    key={this.state.toggleSong}\n                />\n                <input\n                    className=\"answer-input\"\n                    type=\"text\"\n                    onChange={this.playBlindtest}\n                    value={this.state.blindtestGuess}\n                    disabled={this.state.answerIsCorrect ? \"disabled\" : \"\"}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Blindtest;"]},"metadata":{},"sourceType":"module"}