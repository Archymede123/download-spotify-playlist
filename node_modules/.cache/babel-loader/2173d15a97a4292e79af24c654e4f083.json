{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/PlaylistPage.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport className from 'classnames';\nimport Button from './UI-components/Button';\nimport BlindtestGame from './blindtest/BlindtestGame'; // css\n\nimport '../css/PlaylistPage.css';\nvar spotifyApi = new SpotifyWebApi();\n\nvar PlaylistPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlaylistPage, _Component);\n\n  function PlaylistPage() {\n    var _this;\n\n    _classCallCheck(this, PlaylistPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlaylistPage).call(this));\n\n    _this.handleBackButton = function () {\n      _this.props.history.push(\"/\");\n    };\n\n    _this.playPlaylistTracks = function () {\n      var uri = {\n        \"context_uri\": _this.state.playlist.uri\n      };\n      spotifyApi.play(uri);\n    };\n\n    _this.showPlaylists = function () {\n      spotifyApi.getFeaturedPlaylists().then(function (response) {\n        return console.log(response);\n      });\n    };\n\n    _this.startBlindtest = function () {\n      _this.setState({\n        blindtestPlaying: true\n      });\n    };\n\n    _this.finishBlindtest = function () {\n      _this.setState({\n        blindtestPlaying: false\n      });\n    };\n\n    _this.state = {\n      playlist: {},\n      blindtestPlaying: false\n    };\n    return _this;\n  }\n\n  _createClass(PlaylistPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var playlistIndex = this.props.match.params.playlistId.match(/\\d/);\n      var playlist = this.props.playlists.find(function (playlist) {\n        return playlist.index.toString() === playlistIndex[0];\n      });\n      this.setState({\n        playlist: playlist\n      });\n      spotifyApi.setAccessToken(this.props.access_token);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var playlist = this.state.playlist;\n      var blindTestClass = className({\n        blindtestContainer: true,\n        playing: this.state.blindtestPlaying,\n        hidden: !this.state.blindtestPlaying\n      });\n      return React.createElement(\"div\", {\n        className: \"playlistPage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Button, {\n        content: \"Back to playlist list\",\n        onClick: this.handleBackButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, playlist.name), React.createElement(Button, {\n        content: \"Play\",\n        onClick: this.playPlaylistTracks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Button, {\n        content: \"Discover\",\n        onClick: this.showPlaylists,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(Button, {\n        content: \"start blindtest\",\n        onClick: this.startBlindtest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: blindTestClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(BlindtestGame, {\n        access_token: this.props.access_token,\n        closeGame: this.finishBlindtest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), playlist.songs ? React.createElement(\"ul\", {\n        className: \"song-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \" \", playlist.songs.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, song.name);\n      }), \" \") : null);\n    }\n  }]);\n\n  return PlaylistPage;\n}(Component);\n\nexport default PlaylistPage;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/PlaylistPage.js"],"names":["React","Component","SpotifyWebApi","className","Button","BlindtestGame","spotifyApi","PlaylistPage","handleBackButton","props","history","push","playPlaylistTracks","uri","state","playlist","play","showPlaylists","getFeaturedPlaylists","then","response","console","log","startBlindtest","setState","blindtestPlaying","finishBlindtest","playlistIndex","match","params","playlistId","playlists","find","index","toString","setAccessToken","access_token","blindTestClass","blindtestContainer","playing","hidden","name","songs","map","song","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport className from 'classnames';\nimport Button from './UI-components/Button';\nimport BlindtestGame from './blindtest/BlindtestGame';\n\n\n// css\nimport '../css/PlaylistPage.css';\n\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass PlaylistPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            playlist: {},\n            blindtestPlaying: false\n        }\n    }\n\n    handleBackButton = () => {\n        this.props.history.push(`/`)\n    }\n\n    playPlaylistTracks = () => {\n\n        const uri = {\n            \"context_uri\": this.state.playlist.uri,\n        }\n        spotifyApi.play(uri)\n    }\n\n    showPlaylists = () => {\n        spotifyApi.getFeaturedPlaylists().then(response => console.log(response))\n    }\n\n    startBlindtest = () => {\n        this.setState({ blindtestPlaying: true })\n    }\n\n    finishBlindtest = () => {\n        this.setState({ blindtestPlaying: false })\n    }\n\n    componentDidMount() {\n        let playlistIndex = this.props.match.params.playlistId.match(/\\d/)\n        let playlist = this.props.playlists.find(playlist =>\n            playlist.index.toString() === playlistIndex[0]\n        )\n        this.setState({ playlist })\n        spotifyApi.setAccessToken(this.props.access_token)\n    }\n\n    render() {\n        let playlist = this.state.playlist\n        var blindTestClass = className({\n            blindtestContainer: true,\n            playing: this.state.blindtestPlaying,\n            hidden: !this.state.blindtestPlaying\n        })\n        return (\n            <div className=\"playlistPage\">\n                <Button content=\"Back to playlist list\" onClick={this.handleBackButton} />\n                <div>\n                    <p>{playlist.name}</p>\n                    <Button content=\"Play\" onClick={this.playPlaylistTracks} />\n                </div>\n                <div>\n                    <Button content=\"Discover\" onClick={this.showPlaylists} />\n                </div>\n                <Button content=\"start blindtest\" onClick={this.startBlindtest} />\n                <div className={blindTestClass}>\n                    <BlindtestGame\n                        access_token={this.props.access_token}\n                        closeGame={this.finishBlindtest}\n                    />\n                </div>\n                {playlist.songs ?\n                    <ul className=\"song-list\"> {playlist.songs.map((song, key) =>\n                        <li key={key}>{song.name}</li>\n                    )} </ul>\n                    : null\n                }\n            </div>\n\n\n        );\n    }\n}\n\nexport default PlaylistPage;"]},"metadata":{},"sourceType":"module"}