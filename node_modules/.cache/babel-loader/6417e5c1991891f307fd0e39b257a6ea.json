{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport AristSelector from './ArtistSelector';\nimport SessionInformations from './SessionInformations'; //css\n\nimport '../../css/BlindtestSession.css';\nimport '../../css/SessionInformations.css';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.getCurrentPlayedSong = function () {\n      setTimeout(function () {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          var currentData = {\n            song: response.item.name,\n            artist: {\n              name: response.item.artists[0].name,\n              id: response.item.artists[0].id\n            }\n          };\n\n          _this.setState({\n            currentData: currentData\n          });\n        });\n      }, 300);\n    };\n\n    _this.manageMusic = function () {\n      _this.interval = setInterval(function () {\n        _this.getCurrentPlayedSong();\n\n        _this.updateResultList(_this.state.currentData.song);\n\n        spotifyApi.skipToNext();\n      }, _this.state.timeToGuess);\n    };\n\n    _this.updateResultList = function (track) {\n      if (!_this.state.songplayed.includes(track)) {\n        var songplayed = _toConsumableArray(_this.state.songplayed).concat([track]);\n\n        _this.setState({\n          songplayed: songplayed\n        });\n      }\n    };\n\n    _this.submitAnswer = function (artist) {\n      _this.state.currentData.artist.name === artist && _this.updateScore();\n    };\n\n    _this.updateScore = function () {\n      var score = _this.state.score;\n      score += 1;\n\n      _this.setState({\n        score: score\n      });\n\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        return _this.updateResultList(response.item.name);\n      });\n    };\n\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      blindtestLength: 9,\n      sessionOn: false,\n      timeToGuess: 120000\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionOn: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getCurrentPlayedSong();\n      this.manageMusic();\n      this.setState({\n        sessionOn: true\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"played-song\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.songplayed.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, song);\n      })), React.createElement(SessionInformations, {\n        score: this.state.score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), this.state.sessionOn && this.state.currentData && React.createElement(AristSelector, {\n        currentData: this.state.currentData,\n        submitAnswer: this.submitAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","AristSelector","SessionInformations","spotifyApi","BlindtestSession","props","getCurrentPlayedSong","setTimeout","getMyCurrentPlaybackState","then","response","currentData","song","item","name","artist","artists","id","setState","manageMusic","interval","setInterval","updateResultList","state","skipToNext","timeToGuess","track","songplayed","includes","submitAnswer","updateScore","score","blindtestLength","sessionOn","length","clearInterval","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js'\n\n// my components\nimport AristSelector from './ArtistSelector'\nimport SessionInformations from './SessionInformations'\n\n//css\nimport '../../css/BlindtestSession.css'\nimport '../../css/SessionInformations.css'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            songplayed: [],\n            blindtestLength: 9,\n            sessionOn: false,\n            timeToGuess: 120000,\n        }\n    }\n\n    getCurrentPlayedSong = () => {\n        setTimeout(() => {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    let currentData = {\n                        song: response.item.name,\n                        artist: {\n                            name: response.item.artists[0].name,\n                            id: response.item.artists[0].id\n                        }\n                    }\n                    this.setState({ currentData })\n                })\n        }, 300);\n\n    }\n\n    manageMusic = () => {\n        this.interval = setInterval(() => {\n            this.getCurrentPlayedSong()\n            this.updateResultList(this.state.currentData.song)\n            spotifyApi.skipToNext()\n        }, this.state.timeToGuess)\n    }\n\n    updateResultList = (track) => {\n        if (!this.state.songplayed.includes(track)) {\n            let songplayed = [...this.state.songplayed, track]\n            this.setState({ songplayed })\n        }\n    }\n\n    submitAnswer = (artist) => {\n        this.state.currentData.artist.name === artist && this.updateScore()\n    }\n\n    updateScore = () => {\n        let score = this.state.score\n        score += 1\n        this.setState({ score })\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => this.updateResultList(response.item.name))\n    }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n            clearInterval(this.interval)\n            this.setState({ sessionOn: false })\n        }\n    }\n\n    componentDidMount() {\n        this.getCurrentPlayedSong()\n        this.manageMusic()\n        this.setState({ sessionOn: true })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n                <ul className=\"played-song\">\n                    {this.state.songplayed.map((song, key) =>\n                        <li key={key}>{song}</li>\n                    )}\n                </ul>\n                <SessionInformations\n                    score={this.state.score}\n                />\n                {this.state.sessionOn && this.state.currentData &&\n                    <AristSelector\n                        currentData={this.state.currentData}\n                        submitAnswer={this.submitAnswer}\n                    />\n                }\n            </div>\n\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}