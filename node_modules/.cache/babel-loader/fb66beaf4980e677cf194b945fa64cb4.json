{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/ArtistSelector.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport className from 'classnames';\nimport { Motion, spring } from 'react-motion'; // import styled from 'styled-components'\n\nimport Button from '../UI-components/Button'; // js \n\nimport { shuffle } from '../../api/shuffle'; // css \n\nimport '../../css/artistSelector.css';\nimport ArtistCard from './ArtistCard';\nvar spotifyApi = new SpotifyWebApi();\n\nvar AristSelector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AristSelector, _Component);\n\n  function AristSelector(props) {\n    var _this;\n\n    _classCallCheck(this, AristSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AristSelector).call(this, props));\n\n    _this.getArtistImage = function (artistId) {\n      spotifyApi.getArtist(artistId).then(function (response) {\n        var imageUrl = response.images[1] ? response.images[1].url : \"\";\n        var currentArtist = {\n          name: response.name,\n          imageUrl: imageUrl,\n          isSelected: false\n        };\n\n        var artistSelection = _toConsumableArray(_this.state.artistSelection).concat([currentArtist]);\n\n        _this.setState({\n          artistSelection: shuffle(artistSelection)\n        });\n      });\n    };\n\n    _this.getRelatedArtist = function (artistId) {\n      spotifyApi.getArtistRelatedArtists(artistId).then(function (response) {\n        response.artists.slice(0, 3).map(function (artist) {\n          var imageUrl = artist.images[1] ? artist.images[1].url : require('../../images/noImageAvailable.png');\n\n          var artistSelection = _toConsumableArray(_this.state.artistSelection).concat([{\n            name: artist.name,\n            imageUrl: imageUrl,\n            popularity: artist.popularity,\n            isSelected: false\n          }]);\n\n          return _this.setState({\n            artistSelection: shuffle(artistSelection)\n          });\n        });\n      });\n    };\n\n    _this.selectAnswer = function (event) {\n      if (_this.state.userCanSelect) {\n        var artistName = event.currentTarget.dataset.artist;\n\n        _this.props.submitAnswer(artistName);\n\n        var artistSelection = _this.state.artistSelection;\n        var artistIndex = artistSelection.findIndex(function (artist) {\n          return artist.name === artistName;\n        });\n        artistSelection[artistIndex].isSelected = true; // this.setState({ userCanSelect: false })\n      }\n    };\n\n    _this.state = {\n      artistSelection: [],\n      userCanSelect: true\n    };\n    return _this;\n  }\n\n  _createClass(AristSelector, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.currentData !== this.props.currentData) {\n        this.setState({\n          artistSelection: [],\n          userCanSelect: true\n        });\n        this.getRelatedArtist(this.props.currentData.artist.id);\n        this.getArtistImage(this.props.currentData.artist.id);\n      }\n\n      if (prevProps.answers !== this.props.answers) {\n        var currentAnswer = this.props.answers.slice(-1)[0];\n        this.setState({\n          currentAnswer: currentAnswer,\n          answerWasCorrect: currentAnswer.correct,\n          userCanSelect: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getRelatedArtist(this.props.currentData.artist.id);\n      this.getArtistImage(this.props.currentData.artist.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var artists = this.state.artistSelection;\n      var artistClass = className({\n        artist: true,\n        hover: this.state.userCanSelect\n      });\n      return React.createElement(\"div\", {\n        style: this.props.style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"L'artiste est ...\"), React.createElement(\"ul\", {\n        className: \"artists\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, artists.map(function (artist, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          onClick: _this2.selectAnswer,\n          \"data-artist\": artist.name,\n          className: artist.isSelected ? \"artist selected\" : artistClass,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(ArtistCard, {\n          artistName: artist.name,\n          image: artist.imageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"artist-avatar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: artist.imageUrl,\n          alt: artist.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          className: \"artist-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, artist.name));\n      })), !this.state.userCanSelect && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.state.answerWasCorrect ? \"BRAVO\" : \"LOOSER\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"L'artiste : \", this.state.currentAnswer.artist), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Le morceau : \", this.state.currentAnswer.song), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Temps de r\\xE9ponse : \", this.state.currentAnswer.timeSpent, \" secondes\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Nombre de points : \", this.state.currentAnswer.score), React.createElement(Button, {\n        onClick: this.props.nextSong,\n        content: \"prochain morceau\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AristSelector;\n}(Component);\n\nexport default AristSelector;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/ArtistSelector.js"],"names":["React","Component","SpotifyWebApi","className","Motion","spring","Button","shuffle","ArtistCard","spotifyApi","AristSelector","props","getArtistImage","artistId","getArtist","then","response","imageUrl","images","url","currentArtist","name","isSelected","artistSelection","state","setState","getRelatedArtist","getArtistRelatedArtists","artists","slice","map","artist","require","popularity","selectAnswer","event","userCanSelect","artistName","currentTarget","dataset","submitAnswer","artistIndex","findIndex","prevProps","currentData","id","answers","currentAnswer","answerWasCorrect","correct","artistClass","hover","style","key","song","timeSpent","score","nextSong"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js'\nimport className from 'classnames'\nimport { Motion, spring } from 'react-motion'\n// import styled from 'styled-components'\n\nimport Button from '../UI-components/Button'\n\n// js \nimport { shuffle } from '../../api/shuffle';\n\n// css \nimport '../../css/artistSelector.css';\nimport ArtistCard from './ArtistCard';\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass AristSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            artistSelection: [],\n            userCanSelect: true\n        }\n    }\n\n    getArtistImage = (artistId) => {\n        spotifyApi.getArtist(artistId).then(response => {\n            let imageUrl = response.images[1] ? response.images[1].url : \"\"\n            let currentArtist = {\n                name: response.name,\n                imageUrl,\n                isSelected: false\n            }\n            let artistSelection = [...this.state.artistSelection, currentArtist]\n            this.setState({ artistSelection: shuffle(artistSelection) })\n        }\n        )\n    }\n\n    getRelatedArtist = (artistId) => {\n        spotifyApi.getArtistRelatedArtists(artistId)\n            .then(response => {\n                response.artists.slice(0, 3).map(artist => {\n                    let imageUrl = artist.images[1] ? artist.images[1].url : require('../../images/noImageAvailable.png')\n                    let artistSelection = [...this.state.artistSelection, {\n                        name: artist.name,\n                        imageUrl,\n                        popularity: artist.popularity,\n                        isSelected: false\n                    }]\n                    return this.setState({ artistSelection: shuffle(artistSelection) })\n                })\n            })\n    }\n\n    selectAnswer = (event) => {\n        if (this.state.userCanSelect) {\n            let artistName = event.currentTarget.dataset.artist\n            this.props.submitAnswer(artistName)\n            let artistSelection = this.state.artistSelection\n            let artistIndex = artistSelection.findIndex(artist => artist.name === artistName)\n            artistSelection[artistIndex].isSelected = true\n            // this.setState({ userCanSelect: false })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData) {\n            this.setState({\n                artistSelection: [],\n                userCanSelect: true,\n            })\n            this.getRelatedArtist(this.props.currentData.artist.id)\n            this.getArtistImage(this.props.currentData.artist.id)\n        }\n\n        if (prevProps.answers !== this.props.answers) {\n            let currentAnswer = this.props.answers.slice(-1)[0]\n            this.setState({\n                currentAnswer: currentAnswer,\n                answerWasCorrect: currentAnswer.correct,\n                userCanSelect: false\n            })\n        }\n    }\n\n    componentDidMount() {\n        this.getRelatedArtist(this.props.currentData.artist.id)\n        this.getArtistImage(this.props.currentData.artist.id)\n    }\n\n    render() {\n        let artists = this.state.artistSelection\n        var artistClass = className({\n            artist: true,\n            hover: this.state.userCanSelect\n        })\n        return (\n            <div style={this.props.style}>\n                <p className=\"instructions\">L'artiste est ...</p>\n                <ul className=\"artists\">\n                    {artists.map((artist, key) =>\n                        <li\n                            key={key}\n                            onClick={this.selectAnswer}\n                            data-artist={artist.name}\n                            className={artist.isSelected ? \"artist selected\" : artistClass}\n                        >\n                            <ArtistCard\n                                artistName={artist.name}\n                                image={artist.imageUrl}\n                            />\n                            <div className=\"artist-avatar\">\n                                <img\n                                    src={artist.imageUrl}\n                                    alt={artist.name}\n                                />\n                            </div>\n\n                            <p className=\"artist-name\">{artist.name}</p>\n                        </li>\n                    )}\n                </ul>\n                {!this.state.userCanSelect &&\n                    <div>\n                        <p className=\"instructions\">{this.state.answerWasCorrect ? \"BRAVO\" : \"LOOSER\"}</p>\n                        <p>L'artiste : {this.state.currentAnswer.artist}</p>\n                        <p>Le morceau : {this.state.currentAnswer.song}</p>\n                        <p>Temps de réponse : {this.state.currentAnswer.timeSpent} secondes</p>\n                        <p>Nombre de points : {this.state.currentAnswer.score}</p>\n                        <Button\n                            onClick={this.props.nextSong}\n                            content='prochain morceau'\n                        />\n\n                    </div>\n                }\n\n            </div>\n        )\n\n    }\n}\n\n\nexport default AristSelector;"]},"metadata":{},"sourceType":"module"}