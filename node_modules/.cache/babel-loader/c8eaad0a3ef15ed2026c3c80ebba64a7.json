{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown';\nvar spotifyApi = new SpotifyWebApi();\n\nvar Blindtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blindtest, _Component);\n\n  function Blindtest(props) {\n    var _this;\n\n    _classCallCheck(this, Blindtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blindtest).call(this, props));\n    _this._isMounted = true;\n\n    _this.playBlindtest = function (event) {\n      if (_this._isMounted) {\n        _this.setState({\n          blindtestGuess: event.currentTarget.value\n        });\n\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          _this.setState({\n            currentSong: response.item.name\n          });\n        });\n      }\n    };\n\n    _this.stopCountdown = function () {\n      _this.setState({\n        gameStarted: false\n      });\n    };\n\n    _this.toggleSong = function () {\n      var switchedSong = !_this.state.switchedSong;\n\n      _this.setState({\n        switchedSong: switchedSong\n      });\n    };\n\n    _this.restartCountdown = function () {\n      _this.setState({\n        blindtestGuess: \"\",\n        answerIsCorrect: false\n      });\n    };\n\n    var gameStarted = _this.props.gameStarted;\n    var timeToGuess = _this.props.timeToGuess / 1000;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false,\n      gameStarted: gameStarted,\n      timeToGuess: timeToGuess,\n      toggleSong: true\n    };\n    return _this;\n  }\n\n  _createClass(Blindtest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n      this.setState({\n        gameStarted: false\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.gameStarted !== this.props.gameStarted) {\n        var gameStarted = !this.state.gameStarted;\n        this.setState({\n          gameStarted: gameStarted\n        });\n      }\n\n      if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n        if (this._isMounted) {\n          this.props.updateScore();\n          this.setState({\n            answerIsCorrect: true\n          });\n          this.setState({\n            blindtestGuess: \"\"\n          });\n        }\n      }\n\n      if (prevProps.toggleSong !== this.props.toggleSong) {\n        this.setState({\n          toggleSong: !this.state.toggleSong\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      this.setState({\n        gameStarted: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Try to guess the song now playing\"), React.createElement(Countdown, {\n        restartCountdown: this.restartCountdown,\n        timeToGuess: this.state.timeToGuess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"answer-input\",\n        type: \"text\",\n        onChange: this.playBlindtest,\n        value: this.state.blindtestGuess,\n        disabled: this.state.answerIsCorrect ? \"disabled\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Blindtest;\n}(Component);\n\nexport default Blindtest;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js"],"names":["React","Component","SpotifyWebApi","Countdown","spotifyApi","Blindtest","props","_isMounted","playBlindtest","event","setState","blindtestGuess","currentTarget","value","getMyCurrentPlaybackState","then","response","currentSong","item","name","stopCountdown","gameStarted","toggleSong","switchedSong","state","restartCountdown","answerIsCorrect","timeToGuess","setAccessToken","access_token","prevProps","toLowerCase","updateScore"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Countdown from './Countdown'\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass Blindtest extends Component {\n    constructor(props) {\n        super(props);\n        let gameStarted = this.props.gameStarted\n        let timeToGuess = this.props.timeToGuess / 1000\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false,\n            gameStarted,\n            timeToGuess,\n            toggleSong: true\n        }\n    }\n\n    _isMounted = true\n\n    playBlindtest = (event) => {\n        if (this._isMounted) {\n            this.setState({ blindtestGuess: event.currentTarget.value })\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    this.setState({ currentSong: response.item.name })\n                })\n        }\n    }\n\n    stopCountdown = () => {\n        this.setState({ gameStarted: false })\n    }\n\n    toggleSong = () => {\n        let switchedSong = !this.state.switchedSong\n        this.setState({ switchedSong })\n    }\n\n    restartCountdown = () => {\n        this.setState({\n            blindtestGuess: \"\",\n            answerIsCorrect: false\n        })\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        this.setState({ gameStarted: false })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.gameStarted !== this.props.gameStarted) {\n            let gameStarted = !this.state.gameStarted\n            this.setState({ gameStarted })\n        }\n\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n            if (this._isMounted) {\n                this.props.updateScore()\n                this.setState({ answerIsCorrect: true })\n                this.setState({ blindtestGuess: \"\" })\n            }\n        }\n\n        if (prevProps.toggleSong !== this.props.toggleSong) {\n            this.setState({ toggleSong: !this.state.toggleSong })\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        this.setState({ gameStarted: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Try to guess the song now playing</p>\n                <Countdown\n                    restartCountdown={this.restartCountdown}\n                    timeToGuess={this.state.timeToGuess}\n                />\n                <input\n                    className=\"answer-input\"\n                    type=\"text\"\n                    onChange={this.playBlindtest}\n                    value={this.state.blindtestGuess}\n                    disabled={this.state.answerIsCorrect ? \"disabled\" : \"\"}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Blindtest;"]},"metadata":{},"sourceType":"module"}