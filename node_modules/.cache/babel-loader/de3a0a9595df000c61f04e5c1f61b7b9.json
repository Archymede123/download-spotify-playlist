{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nvar Blindtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blindtest, _Component);\n\n  function Blindtest(props) {\n    var _this;\n\n    _classCallCheck(this, Blindtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blindtest).call(this, props));\n    _this._isMounted = true;\n\n    _this.playBlindtest = function (event) {\n      if (_this._isMounted) {\n        _this.setState({\n          blindtestGuess: event.currentTarget.value\n        });\n\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          _this.setState({\n            currentSong: response.item.name\n          });\n        });\n      }\n    };\n\n    var gameStarted = _this.props.gameStarted;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false,\n      gameStarted: gameStarted,\n      timeToGuess: 30\n    };\n    return _this;\n  }\n\n  _createClass(Blindtest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n        if (this._isMounted) {\n          this.props.updateScore();\n          this.setState({\n            blindtestGuess: \"\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      console.log(\"unmounted\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // let answerIsCorrect = this.state.answerIsCorrect\n      return React.createElement(\"div\", {\n        className: \"blindest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.state.gameStarted ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Try to guess the song now playing\"), React.createElement(\"input\", {\n        className: \"answer-input\",\n        type: \"text\",\n        onChange: this.playBlindtest,\n        value: this.state.blindtestGuess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })) : null);\n    }\n  }]);\n\n  return Blindtest;\n}(Component);\n\nexport default Blindtest;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","Blindtest","props","_isMounted","playBlindtest","event","setState","blindtestGuess","currentTarget","value","getMyCurrentPlaybackState","then","response","currentSong","item","name","gameStarted","state","answerIsCorrect","timeToGuess","setAccessToken","access_token","toLowerCase","updateScore","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,IAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;;IAIME,S;;;;;AACF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AADe,UAYnBC,UAZmB,GAYN,IAZM;;AAAA,UAcnBC,aAdmB,GAcH,UAACC,KAAD,EAAW;AACvB,UAAI,MAAKF,UAAT,EAAqB;AACjB,cAAKG,QAAL,CAAc;AAAEC,UAAAA,cAAc,EAAEF,KAAK,CAACG,aAAN,CAAoBC;AAAtC,SAAd;;AACAT,QAAAA,UAAU,CAACU,yBAAX,GACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,gBAAKN,QAAL,CAAc;AAAEO,YAAAA,WAAW,EAAED,QAAQ,CAACE,IAAT,CAAcC;AAA7B,WAAd;AACH,SAHL;AAIH;AACJ,KAtBkB;;AAEf,QAAIC,WAAW,GAAG,MAAKd,KAAL,CAAWc,WAA7B;AACA,UAAKC,KAAL,GAAa;AACTJ,MAAAA,WAAW,EAAE,EADJ;AAETN,MAAAA,cAAc,EAAE,EAFP;AAGTW,MAAAA,eAAe,EAAE,KAHR;AAITF,MAAAA,WAAW,EAAEA,WAJJ;AAKTG,MAAAA,WAAW,EAAE;AALJ,KAAb;AAHe;AAUlB;;;;wCAcmB;AAChBnB,MAAAA,UAAU,CAACoB,cAAX,CAA0B,KAAKlB,KAAL,CAAWmB,YAArC;AACH;;;yCAEoB;AACjB,UAAI,KAAKJ,KAAL,CAAWV,cAAX,KAA8B,EAA9B,IAAoC,KAAKU,KAAL,CAAWJ,WAAX,CAAuBS,WAAvB,OAAyC,KAAKL,KAAL,CAAWV,cAAX,CAA0Be,WAA1B,EAAjF,EAA0H;AACtH,YAAI,KAAKnB,UAAT,EAAqB;AACjB,eAAKD,KAAL,CAAWqB,WAAX;AACA,eAAKjB,QAAL,CAAc;AAAEC,YAAAA,cAAc,EAAE;AAAlB,WAAd;AACH;AACJ;AACJ;;;2CAEsB;AACnB,WAAKJ,UAAL,GAAkB,KAAlB;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;;6BAEQ;AACL;AACA,aACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKR,KAAL,CAAWD,WAAX,GACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADF,EAEE;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,QAAQ,EAC/C,KAAKZ,aADV;AACyB,QAAA,KAAK,EAAE,KAAKa,KAAL,CAAWV,cAD3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADL,GAMK,IAPV,CADJ;AAoBH;;;;EAjEmBT,S;;AAoExB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass Blindtest extends Component {\n    constructor(props) {\n        super(props);\n        let gameStarted = this.props.gameStarted\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false,\n            gameStarted: gameStarted,\n            timeToGuess: 30\n        }\n    }\n\n    _isMounted = true\n\n    playBlindtest = (event) => {\n        if (this._isMounted) {\n            this.setState({ blindtestGuess: event.currentTarget.value })\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    this.setState({ currentSong: response.item.name })\n                })\n        }\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n    }\n\n    componentDidUpdate() {\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n            if (this._isMounted) {\n                this.props.updateScore()\n                this.setState({ blindtestGuess: \"\" })\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        console.log(\"unmounted\")\n    }\n\n    render() {\n        // let answerIsCorrect = this.state.answerIsCorrect\n        return (\n            <div className=\"blindest\">\n                {this.state.gameStarted\n                    ? <div>\n                        <p>Try to guess the song now playing</p>\n                        <input className=\"answer-input\" type=\"text\" onChange=\n                            {this.playBlindtest} value={this.state.blindtestGuess} />\n                    </div>\n                    : null\n                }\n\n                {/* {this.state.blindtestGuess !== \"\" ?\n                    (answerIsCorrect\n                        ? <p>you're good</p>\n                        : <p>keep going</p>\n                    )\n                    : null\n                } */}\n            </div>\n        );\n    }\n}\n\nexport default Blindtest;"]},"metadata":{},"sourceType":"module"}