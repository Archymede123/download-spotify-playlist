{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport AristSelector from './ArtistSelector';\nimport SessionInformations from './SessionInformations'; //css\n\nimport '../../css/BlindtestSession.css';\nimport '../../css/SessionInformations.css';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.getCurrentPlayedSong = function () {\n      setTimeout(function () {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          var currentData = {\n            song: response.item.name,\n            artist: {\n              name: response.item.artists[0].name,\n              id: response.item.artists[0].id\n            }\n          };\n\n          _this.setState({\n            currentData: currentData\n          });\n        });\n      }, 300);\n    };\n\n    _this.timer = function () {\n      _this.getCurrentPlayedSong();\n\n      _this.interval = setInterval(function () {\n        var remainingTime = _this.state.remainingTime;\n        remainingTime -= 1;\n\n        _this.setState({\n          remainingTime: remainingTime\n        });\n\n        if (remainingTime < 1) {\n          _this.nextSong();\n\n          _this.updateResultList(_this.state.currentData.song);\n        }\n      }, 1000);\n    };\n\n    _this.nextSong = function () {\n      _this.setState({\n        remainingTime: 5\n      });\n\n      _this.timer();\n\n      spotifyApi.skipToNext();\n    };\n\n    _this.updateResultList = function (track) {\n      if (!_this.state.songplayed.includes(track)) {\n        var songplayed = _toConsumableArray(_this.state.songplayed).concat([track]);\n\n        _this.setState({\n          songplayed: songplayed\n        });\n      }\n    };\n\n    _this.submitAnswer = function (artist) {\n      clearInterval(_this.interval);\n      _this.state.currentData.artist.name === artist && _this.updateScore();\n\n      _this.nextSong();\n    };\n\n    _this.updateScore = function () {\n      var score = _this.state.score;\n      score += 1;\n\n      _this.setState({\n        score: score\n      });\n\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        return _this.updateResultList(response.item.name);\n      });\n    };\n\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      blindtestLength: 9,\n      sessionOn: false,\n      timeToGuess: 120000,\n      remainingTime: 5\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionOn: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // this.getCurrentPlayedSong()\n      this.timer(); // this.manageMusic()\n\n      this.setState({\n        sessionOn: true\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"played-song\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.state.songplayed.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, song);\n      })), React.createElement(\"div\", {\n        className: \"current-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(SessionInformations, {\n        score: this.state.score,\n        remainingTime: this.state.remainingTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), this.state.sessionOn && this.state.currentData && React.createElement(AristSelector, {\n        currentData: this.state.currentData,\n        submitAnswer: this.submitAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","AristSelector","SessionInformations","spotifyApi","BlindtestSession","props","getCurrentPlayedSong","setTimeout","getMyCurrentPlaybackState","then","response","currentData","song","item","name","artist","artists","id","setState","timer","interval","setInterval","remainingTime","state","nextSong","updateResultList","skipToNext","track","songplayed","includes","submitAnswer","clearInterval","updateScore","score","blindtestLength","sessionOn","timeToGuess","length","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js'\n\n// my components\nimport AristSelector from './ArtistSelector'\nimport SessionInformations from './SessionInformations'\n\n//css\nimport '../../css/BlindtestSession.css'\nimport '../../css/SessionInformations.css'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            songplayed: [],\n            blindtestLength: 9,\n            sessionOn: false,\n            timeToGuess: 120000,\n            remainingTime: 5\n        }\n    }\n\n    getCurrentPlayedSong = () => {\n        setTimeout(() => {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    let currentData = {\n                        song: response.item.name,\n                        artist: {\n                            name: response.item.artists[0].name,\n                            id: response.item.artists[0].id\n                        }\n                    }\n                    this.setState({ currentData })\n                })\n        }, 300);\n    }\n\n\n    timer = () => {\n        this.getCurrentPlayedSong()\n        this.interval = setInterval(() => {\n            let remainingTime = this.state.remainingTime\n            remainingTime -= 1\n            this.setState({ remainingTime })\n            if (remainingTime < 1) {\n                this.nextSong()\n                this.updateResultList(this.state.currentData.song)\n            }\n        }, 1000)\n    }\n\n    nextSong = () => {\n        this.setState({ remainingTime: 5 })\n        this.timer()\n        spotifyApi.skipToNext()\n    }\n\n    // manageMusic = () => {\n    //     this.interval = setInterval(() => {\n    //         this.getCurrentPlayedSong()\n    //         this.updateResultList(this.state.currentData.song)\n    //         spotifyApi.skipToNext()\n    //     }, this.state.timeToGuess)\n    // }\n\n    updateResultList = (track) => {\n        if (!this.state.songplayed.includes(track)) {\n            let songplayed = [...this.state.songplayed, track]\n            this.setState({ songplayed })\n        }\n    }\n\n    submitAnswer = (artist) => {\n        clearInterval(this.interval)\n        this.state.currentData.artist.name === artist && this.updateScore()\n        this.nextSong()\n    }\n\n    updateScore = () => {\n        let score = this.state.score\n        score += 1\n        this.setState({ score })\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => this.updateResultList(response.item.name))\n    }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n            clearInterval(this.interval)\n            this.setState({ sessionOn: false })\n        }\n    }\n\n    componentDidMount() {\n        // this.getCurrentPlayedSong()\n        this.timer()\n        // this.manageMusic()\n        this.setState({ sessionOn: true })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n                <ul className=\"played-song\">\n                    {this.state.songplayed.map((song, key) =>\n                        <li key={key}>{song}</li>\n                    )}\n                </ul>\n                <div className=\"current-session\">\n                    <SessionInformations\n                        score={this.state.score}\n                        remainingTime={this.state.remainingTime}\n                    />\n                    {this.state.sessionOn && this.state.currentData &&\n                        <AristSelector\n                            currentData={this.state.currentData}\n                            submitAnswer={this.submitAnswer}\n                        />\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}