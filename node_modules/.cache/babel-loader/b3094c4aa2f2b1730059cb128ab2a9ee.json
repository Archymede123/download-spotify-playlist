{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/ArtistSelector.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // js \n\nimport { shuffle } from '../../api/shuffle';\nvar spotifyApi = new SpotifyWebApi();\n\nvar AristSelector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AristSelector, _Component);\n\n  function AristSelector(props) {\n    var _this;\n\n    _classCallCheck(this, AristSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AristSelector).call(this, props));\n\n    _this.getArtistImage = function (artistId) {\n      spotifyApi.getArtist(artistId).then(function (response) {\n        var imageUrl = response.images[1] ? response.images[1].url : \"\";\n        var currentArtist = {\n          name: response.name,\n          imageUrl: imageUrl\n        };\n\n        var artistSelection = _toConsumableArray(_this.state.artistSelection).concat([currentArtist]);\n\n        _this.setState({\n          artistSelection: shuffle(artistSelection)\n        });\n      });\n    };\n\n    _this.getRelatedArtist = function (artistId) {\n      spotifyApi.getArtistRelatedArtists(artistId).then(function (response) {\n        response.artists.slice(0, 3).map(function (artist) {\n          var imageUrl = artist.images[1] ? artist.images[1].url : \"\";\n\n          var artistSelection = _toConsumableArray(_this.state.artistSelection).concat([{\n            name: artist.name,\n            imageUrl: imageUrl,\n            popularity: artist.popularity\n          }]);\n\n          return _this.setState({\n            artistSelection: shuffle(artistSelection)\n          });\n        });\n      });\n    };\n\n    _this.selectAnswer = function (event) {\n      if (_this.state.userCanSelect) {\n        _this.props.submitAnswer(event.currentTarget.dataset.artist);\n\n        _this.setState({\n          userCanSelect: false\n        });\n      }\n    };\n\n    _this.state = {\n      artistSelection: [],\n      userCanSelect: true\n    };\n    return _this;\n  }\n\n  _createClass(AristSelector, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.currentData !== this.props.currentData) {\n        this.setState({\n          artistSelection: [],\n          userCanSelect: true\n        });\n        this.getRelatedArtist(this.props.currentData.artist.id);\n        this.getArtistImage(this.props.currentData.artist.id);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getRelatedArtist(this.props.currentData.artist.id);\n      this.getArtistImage(this.props.currentData.artist.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var artists = this.state.artistSelection;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"L'artiste est ...\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, artists.map(function (artist, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          onClick: _this2.selectAnswer,\n          \"data-artist\": artist.name,\n          className: \"artist\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: artist.imageUrl,\n          alt: artist.name,\n          className: \"artist-avatar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"artist-name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, artist.name));\n      })));\n    }\n  }]);\n\n  return AristSelector;\n}(Component);\n\nexport default AristSelector;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/ArtistSelector.js"],"names":["React","Component","SpotifyWebApi","shuffle","spotifyApi","AristSelector","props","getArtistImage","artistId","getArtist","then","response","imageUrl","images","url","currentArtist","name","artistSelection","state","setState","getRelatedArtist","getArtistRelatedArtists","artists","slice","map","artist","popularity","selectAnswer","event","userCanSelect","submitAnswer","currentTarget","dataset","prevProps","currentData","id","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// js \nimport { shuffle } from '../../api/shuffle';\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass AristSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            artistSelection: [],\n            userCanSelect: true\n        }\n    }\n\n    getArtistImage = (artistId) => {\n        spotifyApi.getArtist(artistId).then(response => {\n            let imageUrl = response.images[1] ? response.images[1].url : \"\"\n            let currentArtist = {\n                name: response.name,\n                imageUrl\n            }\n            let artistSelection = [...this.state.artistSelection, currentArtist]\n            this.setState({ artistSelection: shuffle(artistSelection) })\n        }\n        )\n    }\n\n    getRelatedArtist = (artistId) => {\n        spotifyApi.getArtistRelatedArtists(artistId)\n            .then(response => {\n                response.artists.slice(0, 3).map(artist => {\n                    let imageUrl = artist.images[1] ? artist.images[1].url : \"\"\n                    let artistSelection = [...this.state.artistSelection, {\n                        name: artist.name,\n                        imageUrl,\n                        popularity: artist.popularity\n                    }]\n                    return this.setState({ artistSelection: shuffle(artistSelection) })\n                })\n            })\n    }\n\n    selectAnswer = (event) => {\n        if (this.state.userCanSelect) {\n            this.props.submitAnswer(event.currentTarget.dataset.artist)\n            this.setState({ userCanSelect: false })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData) {\n            this.setState({\n                artistSelection: [],\n                userCanSelect: true\n            })\n            this.getRelatedArtist(this.props.currentData.artist.id)\n            this.getArtistImage(this.props.currentData.artist.id)\n        }\n    }\n\n    componentDidMount() {\n        this.getRelatedArtist(this.props.currentData.artist.id)\n        this.getArtistImage(this.props.currentData.artist.id)\n    }\n\n    render() {\n        let artists = this.state.artistSelection\n        return (\n            <div>\n                <p className=\"instructions\">L'artiste est ...</p>\n                <ul>\n                    {artists.map((artist, key) =>\n                        <li\n                            key={key}\n                            onClick={this.selectAnswer}\n                            data-artist={artist.name}\n                            className=\"artist\"\n                        >\n                            <img\n                                src={artist.imageUrl}\n                                alt={artist.name}\n                                className=\"artist-avatar\" />\n                            <p className=\"artist-name\">{artist.name}</p>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n\n    }\n}\n\n\nexport default AristSelector;"]},"metadata":{},"sourceType":"module"}