{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport Blindtest from './Blindtest';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.manageMusic = function () {\n      var currentSong = spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        var currentSong = response.item.name;\n        return currentSong;\n      });\n      console.log(currentSong);\n    };\n\n    _this.updateScore = function () {\n      var score = _this.state.score;\n      score += 1;\n\n      _this.setState({\n        score: score\n      });\n\n      spotifyApi.skipToNext();\n    };\n\n    _this.state = {\n      score: 0,\n      songplayed: {},\n      blindtestLength: 10\n    };\n    return _this;\n  } // manage music : play 10 songs for 30 sec each\n\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.manageMusic();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"informations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Welcome to the blindtest \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"You currently have \", this.state.score, \" points\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Previously played songs\")), React.createElement(Blindtest, {\n        access_token: this.props.access_token,\n        updateScore: this.updateScore,\n        gameStarted: this.props.gameStarted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","Blindtest","spotifyApi","BlindtestSession","props","manageMusic","currentSong","getMyCurrentPlaybackState","then","response","item","name","console","log","updateScore","score","state","setState","skipToNext","songplayed","blindtestLength","access_token","gameStarted"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,UAAU,GAAG,IAAIF,aAAJ,EAAnB;;IAEMG,gB;;;;;AACF,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,0FAAMA,KAAN;;AADe,UAUnBC,WAVmB,GAUL,YAAM;AAChB,UAAIC,WAAW,GAAGJ,UAAU,CAACK,yBAAX,GACbC,IADa,CACR,UAAAC,QAAQ,EAAI;AACd,YAAIH,WAAW,GAAGG,QAAQ,CAACC,IAAT,CAAcC,IAAhC;AACA,eAAOL,WAAP;AACH,OAJa,CAAlB;AAKAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACH,KAjBkB;;AAAA,UAmBnBQ,WAnBmB,GAmBL,YAAM;AAChB,UAAIC,KAAK,GAAG,MAAKC,KAAL,CAAWD,KAAvB;AACAA,MAAAA,KAAK,IAAI,CAAT;;AACA,YAAKE,QAAL,CAAc;AACVF,QAAAA,KAAK,EAALA;AADU,OAAd;;AAGAb,MAAAA,UAAU,CAACgB,UAAX;AACH,KA1BkB;;AAEf,UAAKF,KAAL,GAAa;AACTD,MAAAA,KAAK,EAAE,CADE;AAETI,MAAAA,UAAU,EAAE,EAFH;AAGTC,MAAAA,eAAe,EAAE;AAHR,KAAb;AAFe;AAOlB,G,CAED;;;;;wCAmBoB;AAChB,WAAKf,WAAL;AACH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAuB,KAAKW,KAAL,CAAWD,KAAlC,YAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAHJ,CAFJ,EAOI,oBAAC,SAAD;AACI,QAAA,YAAY,EAAE,KAAKX,KAAL,CAAWiB,YAD7B;AAEI,QAAA,WAAW,EAAE,KAAKP,WAFtB;AAGI,QAAA,WAAW,EAAE,KAAKV,KAAL,CAAWkB,WAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,CADJ;AAgBH;;;;EAlD0BvB,S;;AAqD/B,eAAeI,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// my components\nimport Blindtest from './Blindtest'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            songplayed: {},\n            blindtestLength: 10\n        }\n    }\n\n    // manage music : play 10 songs for 30 sec each\n    manageMusic = () => {\n        let currentSong = spotifyApi.getMyCurrentPlaybackState()\n            .then(response => {\n                let currentSong = response.item.name\n                return currentSong\n            })\n        console.log(currentSong)\n    }\n\n    updateScore = () => {\n        let score = this.state.score\n        score += 1\n        this.setState({\n            score\n        })\n        spotifyApi.skipToNext()\n    }\n\n    componentDidMount() {\n        this.manageMusic()\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n\n                <div className=\"informations\">\n                    <p>Welcome to the blindtest </p>\n                    <p>You currently have {this.state.score} points</p>\n                    <p>Previously played songs</p>\n                </div>\n                <Blindtest\n                    access_token={this.props.access_token}\n                    updateScore={this.updateScore}\n                    gameStarted={this.props.gameStarted}\n                />\n            </div>\n\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}