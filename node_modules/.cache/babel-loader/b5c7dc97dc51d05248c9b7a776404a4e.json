{"ast":null,"code":"import _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js\";\nimport React, { Component } from 'react'; // import Button from './UI-components/Button';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nvar Blindtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Blindtest, _Component);\n\n  function Blindtest() {\n    var _this;\n\n    _classCallCheck(this, Blindtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blindtest).call(this));\n\n    _this.playBlindtest = function (event) {\n      _this.setState({\n        blindtestGuess: event.currentTarget.value\n      });\n\n      spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n        _this.setState({\n          currentSong: response.item.name\n        });\n      });\n    };\n\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      answerIsCorrect: false\n    };\n    return _this;\n  }\n\n  _createClass(Blindtest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(\"component updated\"); // if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n      //     // this.setState({ answerIsCorrect: true })\n      //     this.props.updateScore()\n      // }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var answerIsCorrect = this.state.answerIsCorrect;\n      return React.createElement(\"div\", {\n        className: \"blindest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Try to guess the song now playing\"), React.createElement(\"input\", {\n        className: \"answer-input\",\n        type: \"text\",\n        onChange: this.playBlindtest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), this.state.blindtestGuess !== \"\" ? answerIsCorrect ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"you're good\") : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"keep going\") : null);\n    }\n  }]);\n\n  return Blindtest;\n}(Component);\n\nexport default Blindtest;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/Blindtest.js"],"names":["React","Component","SpotifyWebApi","spotifyApi","Blindtest","playBlindtest","event","setState","blindtestGuess","currentTarget","value","getMyCurrentPlaybackState","then","response","currentSong","item","name","state","answerIsCorrect","setAccessToken","props","access_token","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,IAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;;IAIME,S;;;;;AACF,uBAAc;AAAA;;AAAA;;AACV;;AADU,UASdC,aATc,GASE,UAACC,KAAD,EAAW;AACvB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAEF,KAAK,CAACG,aAAN,CAAoBC;AAAtC,OAAd;;AACAP,MAAAA,UAAU,CAACQ,yBAAX,GACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,cAAKN,QAAL,CAAc;AAAEO,UAAAA,WAAW,EAAED,QAAQ,CAACE,IAAT,CAAcC;AAA7B,SAAd;AACH,OAHL;AAIH,KAfa;;AAEV,UAAKC,KAAL,GAAa;AACTH,MAAAA,WAAW,EAAE,EADJ;AAETN,MAAAA,cAAc,EAAE,EAFP;AAGTU,MAAAA,eAAe,EAAE;AAHR,KAAb;AAFU;AAOb;;;;wCAUmB;AAChBf,MAAAA,UAAU,CAACgB,cAAX,CAA0B,KAAKC,KAAL,CAAWC,YAArC;AACH;;;yCAEoB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EADiB,CAEjB;AACA;AACA;AACA;AACH;;;6BAEQ;AACL,UAAIL,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACA,aACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,EAEI;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,QAAQ,EAC/C,KAAKb,aADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAIK,KAAKY,KAAL,CAAWT,cAAX,KAA8B,EAA9B,GACIU,eAAe,GACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADU,GAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHT,GAKK,IATV,CADJ;AAcH;;;;EA9CmBjB,S;;AAiDxB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react';\n// import Button from './UI-components/Button';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass Blindtest extends Component {\n    constructor() {\n        super();\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            answerIsCorrect: false\n        }\n    }\n\n    playBlindtest = (event) => {\n        this.setState({ blindtestGuess: event.currentTarget.value })\n        spotifyApi.getMyCurrentPlaybackState()\n            .then(response => {\n                this.setState({ currentSong: response.item.name })\n            })\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n    }\n\n    componentDidUpdate() {\n        console.log(\"component updated\")\n        // if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n        //     // this.setState({ answerIsCorrect: true })\n        //     this.props.updateScore()\n        // }\n    }\n\n    render() {\n        let answerIsCorrect = this.state.answerIsCorrect\n        return (\n            <div className=\"blindest\">\n                <p>Try to guess the song now playing</p>\n                <input className=\"answer-input\" type=\"text\" onChange=\n                    {this.playBlindtest} />\n                {this.state.blindtestGuess !== \"\" ?\n                    (answerIsCorrect\n                        ? <p>you're good</p>\n                        : <p>keep going</p>\n                    )\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Blindtest;"]},"metadata":{},"sourceType":"module"}