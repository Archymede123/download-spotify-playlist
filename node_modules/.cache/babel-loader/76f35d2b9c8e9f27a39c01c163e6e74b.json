{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport Blindtest from './Blindtest';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.manageMusic = function () {\n      _this.interval = setInterval(function () {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          var currentSong = response.item.name;\n\n          _this.setState({\n            currentSong: currentSong\n          });\n\n          _this.updateResultList(currentSong);\n        });\n\n        _this.toggleSong();\n\n        spotifyApi.skipToNext();\n      }, _this.state.timeToGuess);\n    };\n\n    _this.updateResultList = function (track) {\n      if (!_this.states.songplayed.includes(track)) {\n        var songplayed = _toConsumableArray(_this.state.songplayed).concat([track]);\n\n        _this.setState({\n          songplayed: songplayed\n        });\n      }\n    };\n\n    _this.updateScore = function () {\n      var score = _this.state.score;\n      score += 1;\n\n      _this.setState({\n        score: score\n      });\n\n      _this.updateResultList(_this.state.currentSong);\n    };\n\n    _this.toggleSong = function () {\n      var switchedSong = !_this.state.switchedSong;\n\n      _this.setState({\n        switchedSong: switchedSong\n      });\n    };\n\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      blindtestLength: 10,\n      sessionEnded: false,\n      timeToGuess: 30000,\n      currentSong: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength & !this.state.sessionEnded) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionEnded: true\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.manageMusic();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"informations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Welcome to the blindtest \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"You currently have \", this.state.score, \" points\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Previously played songs: \"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.state.songplayed.map(function (song, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, song);\n      }))), !this.state.sessionEnded && React.createElement(Blindtest, {\n        timeToGuess: this.state.timeToGuess,\n        access_token: this.props.access_token,\n        updateScore: this.updateScore,\n        toggleSong: this.state.toggleSong,\n        currentSong: this.state.currentSong,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","Blindtest","spotifyApi","BlindtestSession","props","manageMusic","interval","setInterval","getMyCurrentPlaybackState","then","response","currentSong","item","name","setState","updateResultList","toggleSong","skipToNext","state","timeToGuess","track","states","songplayed","includes","updateScore","score","switchedSong","blindtestLength","sessionEnded","length","clearInterval","map","song","key","access_token"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// my components\nimport Blindtest from './Blindtest'\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            songplayed: [],\n            blindtestLength: 10,\n            sessionEnded: false,\n            timeToGuess: 30000,\n            currentSong: \"\"\n        }\n    }\n\n    manageMusic = () => {\n        this.interval = setInterval(() => {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    let currentSong = response.item.name\n                    this.setState({ currentSong })\n                    this.updateResultList(currentSong)\n                })\n            this.toggleSong()\n            spotifyApi.skipToNext()\n        }, this.state.timeToGuess)\n    }\n\n    updateResultList = (track) => {\n        if (!this.states.songplayed.includes(track)) {\n            let songplayed = [...this.state.songplayed, track]\n            this.setState({ songplayed })\n        }\n    }\n\n    updateScore = () => {\n        let score = this.state.score\n        score += 1\n        this.setState({ score })\n        this.updateResultList(this.state.currentSong)\n    }\n\n    toggleSong = () => {\n        let switchedSong = !this.state.switchedSong\n        this.setState({ switchedSong })\n    }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength & !this.state.sessionEnded) {\n            clearInterval(this.interval)\n            this.setState({ sessionEnded: true })\n        }\n    }\n\n    componentDidMount() {\n        this.manageMusic()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n\n                <div className=\"informations\">\n                    <p>Welcome to the blindtest </p>\n                    <p>You currently have {this.state.score} points</p>\n                    <p>Previously played songs: </p>\n                    <ul>\n                        {this.state.songplayed.map((song, key) =>\n                            <li key={key}>{song}</li>\n                        )}\n                    </ul>\n                </div>\n                {!this.state.sessionEnded &&\n                    <Blindtest\n                        timeToGuess={this.state.timeToGuess}\n                        access_token={this.props.access_token}\n                        updateScore={this.updateScore}\n                        toggleSong={this.state.toggleSong}\n                        currentSong={this.state.currentSong}\n                    />\n                }\n            </div>\n\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}