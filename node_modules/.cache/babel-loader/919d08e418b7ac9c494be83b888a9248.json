{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/FindArtist.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js'; // my components\n\nimport Countdown from './Countdown'; // import Button from './UI-components/Button';\n\nimport ArtistSelector from './ArtistSelector';\nvar spotifyApi = new SpotifyWebApi();\n\nvar FindArtist =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FindArtist, _Component);\n\n  function FindArtist(props) {\n    var _this;\n\n    _classCallCheck(this, FindArtist);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindArtist).call(this, props));\n    _this._isMounted = true;\n\n    _this.getCurrentPlayedSong = function () {\n      if (_this._isMounted) {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          _this.setState({\n            currentSong: response.item.name,\n            currentArtist: {\n              name: response.item.artists[0].name,\n              id: response.item.artists[0].id\n            }\n          });\n        });\n      }\n    };\n\n    _this.getRelatedArtist = function (artistId) {\n      _this.setState({\n        relatedArtists: []\n      });\n\n      spotifyApi.getArtistRelatedArtists(artistId).then(function (response) {\n        response.artists.map(function (artist) {\n          var imageUrl = artist.images[1] ? artist.images[1].url : \"\";\n\n          var relatedArtists = _toConsumableArray(_this.state.relatedArtists).concat([{\n            name: artist.name,\n            imageUrl: imageUrl,\n            popularity: artist.popularity\n          }]);\n\n          return _this.setState({\n            relatedArtists: relatedArtists\n          });\n        });\n      });\n    };\n\n    _this.playBlindtest = function (event) {\n      if (_this._isMounted) {\n        _this.setState({\n          blindtestGuess: event.currentTarget.value\n        });\n\n        _this.getCurrentPlayedSong();\n      }\n    };\n\n    var timeToGuess = _this.props.timeToGuess / 1000;\n    _this.state = {\n      currentSong: \"\",\n      blindtestGuess: \"\",\n      relatedArtists: [],\n      answerIsCorrect: false,\n      timeToGuess: timeToGuess,\n      toggleSong: true\n    };\n    return _this;\n  }\n\n  _createClass(FindArtist, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n      this.getCurrentPlayedSong();\n      this.getRelatedArtist(this.state.currentArtist.id);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this._isMounted) {\n        if (prevState.toggleSong !== this.state.toggleSong) {\n          this.getCurrentPlayedSong();\n        }\n\n        if (this.state.currentArtist && prevState.currentArtist !== this.state.currentArtist) {\n          this.setState({\n            relatedArtists: []\n          });\n          this.getRelatedArtist(this.state.currentArtist.id);\n        }\n\n        if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n          if (this._isMounted) {\n            this.props.updateScore();\n            this.setState({\n              answerIsCorrect: true\n            });\n            this.setState({\n              blindtestGuess: \"\"\n            });\n          }\n        }\n\n        if (prevProps.currentSong !== this.props.currentSong) {\n          this.setState({\n            toggleSong: !this.state.toggleSong,\n            answerIsCorrect: false\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      console.log(this._isMounted);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Try to guess the song now playing\"), React.createElement(Countdown, {\n        timeToGuess: this.state.timeToGuess,\n        key: this.state.toggleSong,\n        answerIsCorrect: this.state.answerIsCorrect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"answer-input\",\n        type: \"text\",\n        onChange: this.playBlindtest,\n        value: this.state.blindtestGuess,\n        disabled: this.state.answerIsCorrect ? \"disabled\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(ArtistSelector, {\n        relatedArtists: this.state.relatedArtists,\n        currentArtist: this.state.currentArtist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FindArtist;\n}(Component);\n\nexport default FindArtist;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/FindArtist.js"],"names":["React","Component","SpotifyWebApi","Countdown","ArtistSelector","spotifyApi","FindArtist","props","_isMounted","getCurrentPlayedSong","getMyCurrentPlaybackState","then","response","setState","currentSong","item","name","currentArtist","artists","id","getRelatedArtist","artistId","relatedArtists","getArtistRelatedArtists","map","artist","imageUrl","images","url","state","popularity","playBlindtest","event","blindtestGuess","currentTarget","value","timeToGuess","answerIsCorrect","toggleSong","setAccessToken","access_token","prevProps","prevState","toLowerCase","updateScore","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\n\n// my components\nimport Countdown from './Countdown'\n// import Button from './UI-components/Button';\nimport ArtistSelector from './ArtistSelector';\n\nconst spotifyApi = new SpotifyWebApi();\n\n\n\nclass FindArtist extends Component {\n    constructor(props) {\n        super(props);\n        let timeToGuess = this.props.timeToGuess / 1000\n        this.state = {\n            currentSong: \"\",\n            blindtestGuess: \"\",\n            relatedArtists: [],\n            answerIsCorrect: false,\n            timeToGuess,\n            toggleSong: true\n        }\n    }\n\n    _isMounted = true\n\n    getCurrentPlayedSong = () => {\n        if (this._isMounted) {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    this.setState({\n                        currentSong: response.item.name,\n                        currentArtist: {\n                            name: response.item.artists[0].name,\n                            id: response.item.artists[0].id\n                        }\n                    })\n                })\n        }\n    }\n\n    getRelatedArtist = (artistId) => {\n        this.setState({ relatedArtists: [] })\n        spotifyApi.getArtistRelatedArtists(artistId)\n            .then(response => {\n                response.artists.map(artist => {\n                    let imageUrl = artist.images[1] ? artist.images[1].url : \"\"\n                    let relatedArtists = [...this.state.relatedArtists, {\n                        name: artist.name,\n                        imageUrl,\n                        popularity: artist.popularity\n                    }]\n                    return this.setState({ relatedArtists })\n                })\n            })\n    }\n\n    playBlindtest = (event) => {\n        if (this._isMounted) {\n            this.setState({ blindtestGuess: event.currentTarget.value })\n            this.getCurrentPlayedSong()\n        }\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        this.getCurrentPlayedSong()\n        this.getRelatedArtist(this.state.currentArtist.id)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this._isMounted) {\n            if (prevState.toggleSong !== this.state.toggleSong) {\n                this.getCurrentPlayedSong()\n            }\n\n            if (this.state.currentArtist && prevState.currentArtist !== this.state.currentArtist) {\n                this.setState({ relatedArtists: [] })\n                this.getRelatedArtist(this.state.currentArtist.id)\n            }\n\n\n            if (this.state.blindtestGuess !== \"\" && this.state.currentSong.toLowerCase() === this.state.blindtestGuess.toLowerCase()) {\n                if (this._isMounted) {\n                    this.props.updateScore()\n                    this.setState({ answerIsCorrect: true })\n                    this.setState({ blindtestGuess: \"\" })\n                }\n            }\n\n            if (prevProps.currentSong !== this.props.currentSong) {\n                this.setState({\n                    toggleSong: !this.state.toggleSong,\n                    answerIsCorrect: false\n                })\n            }\n        }\n\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n        console.log(this._isMounted)\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Try to guess the song now playing</p>\n                <Countdown\n                    timeToGuess={this.state.timeToGuess}\n                    key={this.state.toggleSong}\n                    answerIsCorrect={this.state.answerIsCorrect}\n                />\n                <input\n                    className=\"answer-input\"\n                    type=\"text\"\n                    onChange={this.playBlindtest}\n                    value={this.state.blindtestGuess}\n                    disabled={this.state.answerIsCorrect ? \"disabled\" : \"\"}\n                />\n                <ArtistSelector\n                    relatedArtists={this.state.relatedArtists}\n                    currentArtist={this.state.currentArtist}\n                />\n            </div>\n        )\n    }\n}\n\nexport default FindArtist;"]},"metadata":{},"sourceType":"module"}