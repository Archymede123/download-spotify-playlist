{"ast":null,"code":"import _toConsumableArray from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js\";\nimport React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { Motion, spring } from 'react-motion'; // my components\n\nimport AristSelector from './ArtistSelector';\nimport SessionInformations from './SessionInformations';\nimport SessionAnswers from './SessionAnswers'; // js \n\nimport { updateScore, getTotalScore } from '../../api/score'; //css\n\nimport '../../css/BlindtestSession.css';\nimport '../../css/SessionInformations.css';\nvar spotifyApi = new SpotifyWebApi();\n\nvar BlindtestSession =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BlindtestSession, _Component);\n\n  function BlindtestSession(props) {\n    var _this;\n\n    _classCallCheck(this, BlindtestSession);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BlindtestSession).call(this, props));\n\n    _this.getCurrentPlayedSong = function () {\n      setTimeout(function () {\n        spotifyApi.getMyCurrentPlaybackState().then(function (response) {\n          var currentData = {\n            song: response.item.name,\n            artist: {\n              name: response.item.artists[0].name,\n              id: response.item.artists[0].id\n            }\n          };\n\n          _this.setState({\n            currentData: currentData\n          });\n        });\n      }, 300);\n    };\n\n    _this.timer = function () {\n      _this.getCurrentPlayedSong();\n\n      _this.interval = setInterval(function () {\n        var remainingTime = _this.state.remainingTime;\n        remainingTime -= 1;\n\n        _this.setState({\n          remainingTime: remainingTime\n        });\n\n        if (remainingTime < 1) {\n          _this.submitAnswer(\"\");\n        }\n      }, 1000);\n    };\n\n    _this.nextSongDelayed = function () {\n      _this.nextSongTimeout = setTimeout(function () {\n        _this.nextSong();\n      }, 400000);\n    };\n\n    _this.nextSong = function () {\n      clearTimeout(_this.nextSongTimeout);\n      clearInterval(_this.interval);\n\n      _this.updateResultList(_this.state.currentData.song);\n\n      _this.setState({\n        remainingTime: _this.state.timeToGuess\n      });\n\n      spotifyApi.skipToNext();\n\n      _this.timer();\n    };\n\n    _this.updateResultList = function (track) {\n      if (!_this.state.songplayed.includes(track)) {\n        var songplayed = _toConsumableArray(_this.state.songplayed).concat([track]);\n\n        _this.setState({\n          songplayed: songplayed\n        });\n      }\n    };\n\n    _this.submitAnswer = function (artistAnswered, imageUrl) {\n      clearInterval(_this.interval);\n      var timeSpent = _this.state.timeToGuess - _this.state.remainingTime;\n      var correct = _this.state.currentData.artist.name === artistAnswered ? true : false;\n\n      var answers = _toConsumableArray(_this.state.answers).concat([{\n        answer: artistAnswered,\n        artist: _this.state.currentData.artist.name,\n        song: _this.state.currentData.song,\n        imageUrl: imageUrl,\n        correct: correct,\n        timeSpent: timeSpent\n      }]);\n\n      _this.setState({\n        answers: answers\n      }, function () {\n        return _this.updateScore();\n      });\n\n      _this.nextSongDelayed();\n    };\n\n    _this.updateScore = function () {\n      var answers = updateScore(_this.state.answers, _this.state.timeToGuess);\n      var score = getTotalScore(answers);\n\n      _this.setState({\n        score: score,\n        answers: answers\n      });\n\n      _this.updateResultList(_this.state.currentData.song);\n    };\n\n    var timeToGuess = 120;\n    _this.state = {\n      score: 0,\n      songplayed: [],\n      answers: [],\n      blindtestLength: 9,\n      sessionOn: false,\n      timeToGuess: timeToGuess,\n      remainingTime: timeToGuess\n    };\n    return _this;\n  }\n\n  _createClass(BlindtestSession, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n        clearInterval(this.interval);\n        this.setState({\n          sessionOn: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      spotifyApi.setAccessToken(this.props.access_token);\n      this.timer();\n      this.setState({\n        sessionOn: true\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n      clearTimeout(this.nextSongTimeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"blindtest-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Motion, {\n        defaultStyle: {\n          x: -800\n        },\n        style: {\n          x: spring(0)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, function (style) {\n        return React.createElement(SessionAnswers, {\n          answers: _this2.state.answers,\n          style: {\n            transform: \"translateX(\".concat(style.x, \"px)\"),\n            opacity: style.opacity\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"current-session\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(SessionInformations, {\n        score: this.state.score,\n        remainingTime: this.state.remainingTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), this.state.sessionOn && this.state.currentData && React.createElement(\"div\", {\n        className: \"current-blindest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Motion, {\n        defaultStyle: {\n          x: -800,\n          opacity: 0\n        },\n        style: {\n          x: spring(0),\n          opacity: spring(1)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, function (style) {\n        return React.createElement(AristSelector, {\n          style: {\n            transform: \"translateX(\".concat(style.x, \"px)\"),\n            opacity: style.opacity\n          },\n          currentData: _this2.state.currentData,\n          submitAnswer: _this2.submitAnswer,\n          nextSong: _this2.nextSong,\n          answers: _this2.state.answers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return BlindtestSession;\n}(Component);\n\nexport default BlindtestSession;","map":{"version":3,"sources":["/Users/timotheereynaud/code/Archymede123/better-playlists-tuto/download-spotify-playlist/src/components/blindtest/BlindtestSession.js"],"names":["React","Component","SpotifyWebApi","Motion","spring","AristSelector","SessionInformations","SessionAnswers","updateScore","getTotalScore","spotifyApi","BlindtestSession","props","getCurrentPlayedSong","setTimeout","getMyCurrentPlaybackState","then","response","currentData","song","item","name","artist","artists","id","setState","timer","interval","setInterval","remainingTime","state","submitAnswer","nextSongDelayed","nextSongTimeout","nextSong","clearTimeout","clearInterval","updateResultList","timeToGuess","skipToNext","track","songplayed","includes","artistAnswered","imageUrl","timeSpent","correct","answers","answer","score","blindtestLength","sessionOn","length","setAccessToken","access_token","x","style","transform","opacity"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,cAA/B,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAGA;;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,iBAA3C,C,CAGA;;AACA,OAAO,gCAAP;AACA,OAAO,mCAAP;AAGA,IAAMC,UAAU,GAAG,IAAIR,aAAJ,EAAnB;;IAEMS,gB;;;;;AACF,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,0FAAMA,KAAN;;AADe,UAcnBC,oBAdmB,GAcI,YAAM;AACzBC,MAAAA,UAAU,CAAC,YAAM;AACbJ,QAAAA,UAAU,CAACK,yBAAX,GACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,cAAIC,WAAW,GAAG;AACdC,YAAAA,IAAI,EAAEF,QAAQ,CAACG,IAAT,CAAcC,IADN;AAEdC,YAAAA,MAAM,EAAE;AACJD,cAAAA,IAAI,EAAEJ,QAAQ,CAACG,IAAT,CAAcG,OAAd,CAAsB,CAAtB,EAAyBF,IAD3B;AAEJG,cAAAA,EAAE,EAAEP,QAAQ,CAACG,IAAT,CAAcG,OAAd,CAAsB,CAAtB,EAAyBC;AAFzB;AAFM,WAAlB;;AAOA,gBAAKC,QAAL,CAAc;AAAEP,YAAAA,WAAW,EAAXA;AAAF,WAAd;AACH,SAVL;AAWH,OAZS,EAYP,GAZO,CAAV;AAaH,KA5BkB;;AAAA,UA+BnBQ,KA/BmB,GA+BX,YAAM;AACV,YAAKb,oBAAL;;AACA,YAAKc,QAAL,GAAgBC,WAAW,CAAC,YAAM;AAC9B,YAAIC,aAAa,GAAG,MAAKC,KAAL,CAAWD,aAA/B;AACAA,QAAAA,aAAa,IAAI,CAAjB;;AACA,cAAKJ,QAAL,CAAc;AAAEI,UAAAA,aAAa,EAAbA;AAAF,SAAd;;AACA,YAAIA,aAAa,GAAG,CAApB,EAAuB;AACnB,gBAAKE,YAAL,CAAkB,EAAlB;AACH;AACJ,OAP0B,EAOxB,IAPwB,CAA3B;AAQH,KAzCkB;;AAAA,UA2CnBC,eA3CmB,GA2CD,YAAM;AACpB,YAAKC,eAAL,GAAuBnB,UAAU,CAAC,YAAM;AACpC,cAAKoB,QAAL;AACH,OAFgC,EAE9B,MAF8B,CAAjC;AAGH,KA/CkB;;AAAA,UAiDnBA,QAjDmB,GAiDR,YAAM;AACbC,MAAAA,YAAY,CAAC,MAAKF,eAAN,CAAZ;AACAG,MAAAA,aAAa,CAAC,MAAKT,QAAN,CAAb;;AACA,YAAKU,gBAAL,CAAsB,MAAKP,KAAL,CAAWZ,WAAX,CAAuBC,IAA7C;;AACA,YAAKM,QAAL,CAAc;AAAEI,QAAAA,aAAa,EAAE,MAAKC,KAAL,CAAWQ;AAA5B,OAAd;;AACA5B,MAAAA,UAAU,CAAC6B,UAAX;;AACA,YAAKb,KAAL;AACH,KAxDkB;;AAAA,UA2DnBW,gBA3DmB,GA2DA,UAACG,KAAD,EAAW;AAC1B,UAAI,CAAC,MAAKV,KAAL,CAAWW,UAAX,CAAsBC,QAAtB,CAA+BF,KAA/B,CAAL,EAA4C;AACxC,YAAIC,UAAU,sBAAO,MAAKX,KAAL,CAAWW,UAAlB,UAA8BD,KAA9B,EAAd;;AACA,cAAKf,QAAL,CAAc;AAAEgB,UAAAA,UAAU,EAAVA;AAAF,SAAd;AACH;AACJ,KAhEkB;;AAAA,UAkEnBV,YAlEmB,GAkEJ,UAACY,cAAD,EAAiBC,QAAjB,EAA8B;AACzCR,MAAAA,aAAa,CAAC,MAAKT,QAAN,CAAb;AACA,UAAIkB,SAAS,GAAG,MAAKf,KAAL,CAAWQ,WAAX,GAAyB,MAAKR,KAAL,CAAWD,aAApD;AACA,UAAIiB,OAAO,GAAG,MAAKhB,KAAL,CAAWZ,WAAX,CAAuBI,MAAvB,CAA8BD,IAA9B,KAAuCsB,cAAvC,GAAwD,IAAxD,GAA+D,KAA7E;;AACA,UAAII,OAAO,sBAAO,MAAKjB,KAAL,CAAWiB,OAAlB,UAA2B;AAClCC,QAAAA,MAAM,EAAEL,cAD0B;AAElCrB,QAAAA,MAAM,EAAE,MAAKQ,KAAL,CAAWZ,WAAX,CAAuBI,MAAvB,CAA8BD,IAFJ;AAGlCF,QAAAA,IAAI,EAAE,MAAKW,KAAL,CAAWZ,WAAX,CAAuBC,IAHK;AAIlCyB,QAAAA,QAAQ,EAARA,QAJkC;AAKlCE,QAAAA,OAAO,EAAPA,OALkC;AAMlCD,QAAAA,SAAS,EAATA;AANkC,OAA3B,EAAX;;AAQA,YAAKpB,QAAL,CAAc;AAAEsB,QAAAA,OAAO,EAAPA;AAAF,OAAd,EAA2B;AAAA,eAAM,MAAKvC,WAAL,EAAN;AAAA,OAA3B;;AACA,YAAKwB,eAAL;AACH,KAhFkB;;AAAA,UAkFnBxB,WAlFmB,GAkFL,YAAM;AAChB,UAAIuC,OAAO,GAAGvC,WAAW,CAAC,MAAKsB,KAAL,CAAWiB,OAAZ,EAAqB,MAAKjB,KAAL,CAAWQ,WAAhC,CAAzB;AACA,UAAIW,KAAK,GAAGxC,aAAa,CAACsC,OAAD,CAAzB;;AACA,YAAKtB,QAAL,CAAc;AAAEwB,QAAAA,KAAK,EAALA,KAAF;AAASF,QAAAA,OAAO,EAAPA;AAAT,OAAd;;AACA,YAAKV,gBAAL,CAAsB,MAAKP,KAAL,CAAWZ,WAAX,CAAuBC,IAA7C;AACH,KAvFkB;;AAEf,QAAImB,WAAW,GAAG,GAAlB;AACA,UAAKR,KAAL,GAAa;AACTmB,MAAAA,KAAK,EAAE,CADE;AAETR,MAAAA,UAAU,EAAE,EAFH;AAGTM,MAAAA,OAAO,EAAE,EAHA;AAITG,MAAAA,eAAe,EAAE,CAJR;AAKTC,MAAAA,SAAS,EAAE,KALF;AAMTb,MAAAA,WAAW,EAAXA,WANS;AAOTT,MAAAA,aAAa,EAAES;AAPN,KAAb;AAHe;AAYlB;;;;yCA6EoB;AACjB,UAAI,KAAKR,KAAL,CAAWW,UAAX,CAAsBW,MAAtB,KAAiC,KAAKtB,KAAL,CAAWoB,eAA5C,GAA8D,KAAKpB,KAAL,CAAWqB,SAA7E,EAAwF;AACpFf,QAAAA,aAAa,CAAC,KAAKT,QAAN,CAAb;AACA,aAAKF,QAAL,CAAc;AAAE0B,UAAAA,SAAS,EAAE;AAAb,SAAd;AACH;AACJ;;;wCAEmB;AAChBzC,MAAAA,UAAU,CAAC2C,cAAX,CAA0B,KAAKzC,KAAL,CAAW0C,YAArC;AACA,WAAK5B,KAAL;AACA,WAAKD,QAAL,CAAc;AAAE0B,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH;;;2CAEsB;AACnBf,MAAAA,aAAa,CAAC,KAAKT,QAAN,CAAb;AACAQ,MAAAA,YAAY,CAAC,KAAKF,eAAN,CAAZ;AACH;;;6BAEQ;AAAA;;AACL,aACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,YAAY,EAAE;AAAEsB,UAAAA,CAAC,EAAE,CAAC;AAAN,SADlB;AAEI,QAAA,KAAK,EAAE;AAAEA,UAAAA,CAAC,EAAEnD,MAAM,CAAC,CAAD;AAAX,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIK,UAACoD,KAAD;AAAA,eACG,oBAAC,cAAD;AACI,UAAA,OAAO,EAAE,MAAI,CAAC1B,KAAL,CAAWiB,OADxB;AAEI,UAAA,KAAK,EAAE;AAAEU,YAAAA,SAAS,uBAAgBD,KAAK,CAACD,CAAtB,QAAX;AAAyCG,YAAAA,OAAO,EAAEF,KAAK,CAACE;AAAxD,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAAA,OAJL,CADJ,CAFJ,EAiBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,mBAAD;AACI,QAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWmB,KADtB;AAEI,QAAA,aAAa,EAAE,KAAKnB,KAAL,CAAWD,aAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKK,KAAKC,KAAL,CAAWqB,SAAX,IAAwB,KAAKrB,KAAL,CAAWZ,WAAnC,IACG;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,YAAY,EAAE;AAAEqC,UAAAA,CAAC,EAAE,CAAC,GAAN;AAAWG,UAAAA,OAAO,EAAE;AAApB,SADlB;AAEI,QAAA,KAAK,EAAE;AAAEH,UAAAA,CAAC,EAAEnD,MAAM,CAAC,CAAD,CAAX;AAAgBsD,UAAAA,OAAO,EAAEtD,MAAM,CAAC,CAAD;AAA/B,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIK,UAACoD,KAAD;AAAA,eACG,oBAAC,aAAD;AACI,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,uBAAgBD,KAAK,CAACD,CAAtB,QAAX;AAAyCG,YAAAA,OAAO,EAAEF,KAAK,CAACE;AAAxD,WADX;AAEI,UAAA,WAAW,EAAE,MAAI,CAAC5B,KAAL,CAAWZ,WAF5B;AAGI,UAAA,YAAY,EAAE,MAAI,CAACa,YAHvB;AAII,UAAA,QAAQ,EAAE,MAAI,CAACG,QAJnB;AAKI,UAAA,OAAO,EAAE,MAAI,CAACJ,KAAL,CAAWiB,OALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAAA,OAJL,CADJ,CANR,CAjBJ,CADJ;AA6CH;;;;EA1J0B9C,S;;AA6J/B,eAAeU,gBAAf","sourcesContent":["import React, { Component } from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js'\nimport { Motion, spring } from 'react-motion'\n\n// my components\nimport AristSelector from './ArtistSelector'\nimport SessionInformations from './SessionInformations'\nimport SessionAnswers from './SessionAnswers';\n\n\n// js \nimport { updateScore, getTotalScore } from '../../api/score'\n\n\n//css\nimport '../../css/BlindtestSession.css'\nimport '../../css/SessionInformations.css'\n\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass BlindtestSession extends Component {\n    constructor(props) {\n        super(props);\n        let timeToGuess = 120\n        this.state = {\n            score: 0,\n            songplayed: [],\n            answers: [],\n            blindtestLength: 9,\n            sessionOn: false,\n            timeToGuess,\n            remainingTime: timeToGuess\n        }\n    }\n\n    getCurrentPlayedSong = () => {\n        setTimeout(() => {\n            spotifyApi.getMyCurrentPlaybackState()\n                .then(response => {\n                    let currentData = {\n                        song: response.item.name,\n                        artist: {\n                            name: response.item.artists[0].name,\n                            id: response.item.artists[0].id\n                        }\n                    }\n                    this.setState({ currentData })\n                })\n        }, 300);\n    }\n\n\n    timer = () => {\n        this.getCurrentPlayedSong()\n        this.interval = setInterval(() => {\n            let remainingTime = this.state.remainingTime\n            remainingTime -= 1\n            this.setState({ remainingTime })\n            if (remainingTime < 1) {\n                this.submitAnswer(\"\")\n            }\n        }, 1000)\n    }\n\n    nextSongDelayed = () => {\n        this.nextSongTimeout = setTimeout(() => {\n            this.nextSong()\n        }, 400000);\n    }\n\n    nextSong = () => {\n        clearTimeout(this.nextSongTimeout)\n        clearInterval(this.interval)\n        this.updateResultList(this.state.currentData.song)\n        this.setState({ remainingTime: this.state.timeToGuess })\n        spotifyApi.skipToNext()\n        this.timer()\n    }\n\n\n    updateResultList = (track) => {\n        if (!this.state.songplayed.includes(track)) {\n            let songplayed = [...this.state.songplayed, track]\n            this.setState({ songplayed })\n        }\n    }\n\n    submitAnswer = (artistAnswered, imageUrl) => {\n        clearInterval(this.interval)\n        let timeSpent = this.state.timeToGuess - this.state.remainingTime\n        let correct = this.state.currentData.artist.name === artistAnswered ? true : false\n        let answers = [...this.state.answers, {\n            answer: artistAnswered,\n            artist: this.state.currentData.artist.name,\n            song: this.state.currentData.song,\n            imageUrl,\n            correct,\n            timeSpent\n        }]\n        this.setState({ answers }, () => this.updateScore())\n        this.nextSongDelayed()\n    }\n\n    updateScore = () => {\n        let answers = updateScore(this.state.answers, this.state.timeToGuess)\n        let score = getTotalScore(answers)\n        this.setState({ score, answers })\n        this.updateResultList(this.state.currentData.song)\n    }\n\n    componentDidUpdate() {\n        if (this.state.songplayed.length === this.state.blindtestLength & this.state.sessionOn) {\n            clearInterval(this.interval)\n            this.setState({ sessionOn: false })\n        }\n    }\n\n    componentDidMount() {\n        spotifyApi.setAccessToken(this.props.access_token)\n        this.timer()\n        this.setState({ sessionOn: true })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n        clearTimeout(this.nextSongTimeout)\n    }\n\n    render() {\n        return (\n            <div className=\"blindtest-session\">\n                {/* {this.state.answers.length > 0 && */}\n                <div>\n                    <Motion\n                        defaultStyle={{ x: -800 }}\n                        style={{ x: spring(0) }}\n                    >\n                        {(style) => (\n                            <SessionAnswers\n                                answers={this.state.answers}\n                                style={{ transform: `translateX(${style.x}px)`, opacity: style.opacity }}\n                            />\n                        )}\n                    </Motion>\n                </div>\n\n                {/* } */}\n                <div className=\"current-session\">\n                    <SessionInformations\n                        score={this.state.score}\n                        remainingTime={this.state.remainingTime}\n                    />\n                    {this.state.sessionOn && this.state.currentData &&\n                        <div className='current-blindest'>\n                            <Motion\n                                defaultStyle={{ x: -800, opacity: 0 }}\n                                style={{ x: spring(0), opacity: spring(1) }}\n                            >\n                                {(style) => (\n                                    <AristSelector\n                                        style={{ transform: `translateX(${style.x}px)`, opacity: style.opacity }}\n                                        currentData={this.state.currentData}\n                                        submitAnswer={this.submitAnswer}\n                                        nextSong={this.nextSong}\n                                        answers={this.state.answers}\n                                    />\n                                )}\n\n                            </Motion>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BlindtestSession;"]},"metadata":{},"sourceType":"module"}